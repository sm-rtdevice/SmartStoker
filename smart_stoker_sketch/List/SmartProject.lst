
AVRASM ver. 2.1.30  E:\Arduino controllers\Smart_Stoker_Project_Develop_2018-06-16\Smart_Stoker_project_2018-06-13\Smart кочегар v 2.4a\Контроллер AVR ATmega32\Прошивка (Cvavr)\List\SmartProject.asm Mon Jan 28 22:35:51 2019

                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega32A
                 ;Program type             : Application
                 ;Clock frequency          : 8,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : Off
                 ;Automatic register allocation : Off
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2143
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 008d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0348 	JMP  _timer1_timer
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 015a 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 01a2 	JMP  _usart_tx_isr
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _conv_delay_G101:
00002a 0064
00002b 00c8
00002c 0190
00002d 0320      	.DB  0x64,0x0,0xC8,0x0,0x90,0x1,0x20,0x3
                 _bit_mask_G101:
00002e fff8
00002f fffc
000030 fffe
000031 ffff      	.DB  0xF8,0xFF,0xFC,0xFF,0xFE,0xFF,0xFF,0xFF
                 _tbl10_G105:
000032 2710
000033 03e8
000034 0064
000035 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000036 0001      	.DB  0x1,0x0
                 _tbl16_G105:
000037 1000
000038 0100
000039 0010
00003a 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00003b 0001      	.DW  0x0001
                 
                 _0x6:
E:\Arduino controllers\Smart_Stoker_Project_Develop_2018-06-16\Smart_Stoker_project_2018-06-13\Smart кочегар v 2.4a\Контроллер AVR ATmega32\Прошивка (Cvavr)\List\SmartProject.asm(1101): warning: .cseg .db misalignment - padding zero byte
00003c 0003      	.DB  0x3
                 _0x7:
00003d ffa6
00003e ffa6      	.DB  0xA6,0xFF,0xA6,0xFF
                 _0x8:
E:\Arduino controllers\Smart_Stoker_Project_Develop_2018-06-16\Smart_Stoker_project_2018-06-13\Smart кочегар v 2.4a\Контроллер AVR ATmega32\Прошивка (Cvavr)\List\SmartProject.asm(1105): warning: .cseg .db misalignment - padding zero byte
00003f 0032      	.DB  0x32
                 _0x9:
E:\Arduino controllers\Smart_Stoker_Project_Develop_2018-06-16\Smart_Stoker_project_2018-06-13\Smart кочегар v 2.4a\Контроллер AVR ATmega32\Прошивка (Cvavr)\List\SmartProject.asm(1107): warning: .cseg .db misalignment - padding zero byte
000040 0001      	.DB  0x1
                 _0x0:
000041 252d
000042 2e69
000043 7525
000044 43df      	.DB  0x2D,0x25,0x69,0x2E,0x25,0x75,0xDF,0x43
000045 2b00
000046 6925
000047 252e
000048 df75      	.DB  0x0,0x2B,0x25,0x69,0x2E,0x25,0x75,0xDF
000049 0043
00004a 2d2d
00004b 2d2e
00004c 43df      	.DB  0x43,0x0,0x2D,0x2D,0x2E,0x2D,0xDF,0x43
00004d 2500
00004e 2569
00004f 2e25
000050 6925      	.DB  0x0,0x25,0x69,0x25,0x25,0x2E,0x25,0x69
000051 5300
000052 616d
000053 7472
000054 5320      	.DB  0x0,0x53,0x6D,0x61,0x72,0x74,0x20,0x53
000055 6f74
000056 656b
000057 0072
000058 3a76      	.DB  0x74,0x6F,0x6B,0x65,0x72,0x0,0x76,0x3A
000059 2e32
00005a 2035
00005b 6f4c
00005c 6461      	.DB  0x32,0x2E,0x35,0x20,0x4C,0x6F,0x61,0x64
00005d 6e69
00005e 2e67
00005f 2e2e
E:\Arduino controllers\Smart_Stoker_Project_Develop_2018-06-16\Smart_Stoker_project_2018-06-13\Smart кочегар v 2.4a\Контроллер AVR ATmega32\Прошивка (Cvavr)\List\SmartProject.asm(1116): warning: .cseg .db misalignment - padding zero byte
000060 0000      	.DB  0x69,0x6E,0x67,0x2E,0x2E,0x2E,0x0
                 _0x2060003:
000061 c080      	.DB  0x80,0xC0
                 _0x2080060:
E:\Arduino controllers\Smart_Stoker_Project_Develop_2018-06-16\Smart_Stoker_project_2018-06-13\Smart кочегар v 2.4a\Контроллер AVR ATmega32\Прошивка (Cvavr)\List\SmartProject.asm(1120): warning: .cseg .db misalignment - padding zero byte
000062 0001      	.DB  0x1
                 _0x2080000:
000063 4e2d
000064 4e41
000065 4900
000066 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\Arduino controllers\Smart_Stoker_Project_Develop_2018-06-16\Smart_Stoker_project_2018-06-13\Smart кочегар v 2.4a\Контроллер AVR ATmega32\Прошивка (Cvavr)\List\SmartProject.asm(1123): warning: .cseg .db misalignment - padding zero byte
000067 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000068 0001      	.DW  0x01
000069 0002      	.DW  0x02
00006a 0076      	.DW  __REG_BIT_VARS*2
                 
00006b 0001      	.DW  0x01
00006c 02a5      	.DW  _ds1820_devices
00006d 0078      	.DW  _0x6*2
                 
00006e 0004      	.DW  0x04
00006f 02a6      	.DW  _Temperature
000070 007a      	.DW  _0x7*2
                 
000071 0001      	.DW  0x01
000072 02d3      	.DW  _MaxT1
000073 007e      	.DW  _0x8*2
                 
000074 0001      	.DW  0x01
000075 02d4      	.DW  _OnBlock
000076 0080      	.DW  _0x9*2
                 
000077 0007      	.DW  0x07
000078 0260      	.DW  _0x2E
000079 0094      	.DW  _0x0*2+18
                 
00007a 0007      	.DW  0x07
00007b 0267      	.DW  _0x2E+7
00007c 0094      	.DW  _0x0*2+18
                 
00007d 0007      	.DW  0x07
00007e 026e      	.DW  _0x2E+14
00007f 0094      	.DW  _0x0*2+18
                 
000080 000d      	.DW  0x0D
000081 0275      	.DW  _0xA0
000082 00a3      	.DW  _0x0*2+33
                 
000083 0011      	.DW  0x11
000084 0282      	.DW  _0xA0+13
000085 00b0      	.DW  _0x0*2+46
                 
000086 0002      	.DW  0x02
000087 0334      	.DW  __base_y_G103
000088 00c2      	.DW  _0x2060003*2
                 
000089 0001      	.DW  0x01
00008a 033b      	.DW  __seed_G104
00008b 00c4      	.DW  _0x2080060*2
                 
                 _0xFFFFFFFF:
00008c 0000      	.DW  0
                 
                 __RESET:
00008d 94f8      	CLI
00008e 27ee      	CLR  R30
00008f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000090 e0f1      	LDI  R31,1
000091 bff5      	OUT  MCUCR,R31
000092 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000093 e1f8      	LDI  R31,0x18
000094 bdf1      	OUT  WDTCR,R31
000095 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000096 e08d      	LDI  R24,(14-2)+1
000097 e0a2      	LDI  R26,2
000098 27bb      	CLR  R27
                 __CLEAR_REG:
000099 93ed      	ST   X+,R30
00009a 958a      	DEC  R24
00009b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00009c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00009d e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00009e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00009f 93ed      	ST   X+,R30
0000a0 9701      	SBIW R24,1
0000a1 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000a2 ede0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000a3 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000a4 9185      	LPM  R24,Z+
0000a5 9195      	LPM  R25,Z+
0000a6 9700      	SBIW R24,0
0000a7 f061      	BREQ __GLOBAL_INI_END
0000a8 91a5      	LPM  R26,Z+
0000a9 91b5      	LPM  R27,Z+
0000aa 9005      	LPM  R0,Z+
0000ab 9015      	LPM  R1,Z+
0000ac 01bf      	MOVW R22,R30
0000ad 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000ae 9005      	LPM  R0,Z+
0000af 920d      	ST   X+,R0
0000b0 9701      	SBIW R24,1
0000b1 f7e1      	BRNE __GLOBAL_INI_LOOP
0000b2 01fb      	MOVW R30,R22
0000b3 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000b4 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000b5 bfed      	OUT  SPL,R30
0000b6 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000b7 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000b8 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000b9 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ba 940c 0452 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Project : SMART-кочегар (Stoker)
                 ;Version : v.: 2.4a
                 ;Date    : 26.04.2018
                 ;Author  : SIS
                 ;Company : Sm@rt-Device
                 ;Comments: автоматизированный контроль и управление насосом системы отопления
                 ;
                 ;Chip type           : ATMega32 A - PU
                 ;Clock frequency     : 8,000000 MHz, время выполнения команды: 1/8000000 = 0,000000125 сек = 0.125 мкс
                 ;Memory model        : Small Flash - 32KB (16K x 16), ROM - , RAM - , EEPROM - 2024 b
                 ;External SRAM size  : 0
                 ;Data Stack size     : 512
                 ;
                 ;Дивайсы: DS1820/DS18S20/DS18B20 на шине 1-Wire, CPU AVR ATmega32, программатор USB/ISP (in system programmen), USART: адаптер USB -> TTL/blueTooth, LCD-display
                 ;
                 ;алгоритм работы:
                 ;по умолчанию автоматическое управление от датчиков
                 ;переход на импульсный режим в случае отказа датчика на радиаторе или вручную (по-выбору импульсного режима),
                 ;принудительное ручное управление насосом
                 ;
                 ;выводы МК:
                 ;PORTD.5: 1 - включение насоса; 0 - отключение насоса
                 ;PORTA.5: 1 - неисправность датчика; 0 - датчик в норме (не используется)
                 ;PORTA.6: 0/1 индикатор работы импульсного режима
                 ;PORTA.7: 0/1 индикатор работы от датчиков
                 ;
                 ;PORTA.6,7 = [0,0] - ручное управление, [1,0] - импульсный режим, [0,1] - работа от датчиков, [1,1] - ошибка инициализации датчиков
                 ;
                 ;UART (9600bod/1start/1stop/no_parity) = 9600*0.8 = 7680бит/с = 960байт/с; 1байт = 1,041мс	~2*к-во байт + ожидание расчета температуры ~600-800мс
                 ;*****************************************************/
                 ;
                 ;#include "stdafx.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 
                 	.CSEG
                 _sncpy:
                 ;	*dest -> Y+2
                 ;	*src -> Y+0
0000bc 81a8      	LD   R26,Y
0000bd 81b9      	LDD  R27,Y+1
0000be 940e 0d77 	CALL __EEPROMRDB
0000c0 81aa      	LDD  R26,Y+2
0000c1 81bb      	LDD  R27,Y+2+1
0000c2 93ec      	ST   X,R30
0000c3 81a8      	LD   R26,Y
0000c4 81b9      	LDD  R27,Y+1
0000c5 9611      	ADIW R26,1
0000c6 940e 0d77 	CALL __EEPROMRDB
                +
0000c8 81aa     +LDD R26 , Y + 2
0000c9 81bb     +LDD R27 , Y + 2 + 1
0000ca 9611     +ADIW R26 , 1
0000cb 93ec     +ST X , R30
                 	__PUTB1SNS 2,1
0000cc 81a8      	LD   R26,Y
0000cd 81b9      	LDD  R27,Y+1
0000ce 9612      	ADIW R26,2
0000cf 940e 0d77 	CALL __EEPROMRDB
                +
0000d1 81aa     +LDD R26 , Y + 2
0000d2 81bb     +LDD R27 , Y + 2 + 1
0000d3 9612     +ADIW R26 , 2
0000d4 93ec     +ST X , R30
                 	__PUTB1SNS 2,2
0000d5 81a8      	LD   R26,Y
0000d6 81b9      	LDD  R27,Y+1
0000d7 9613      	ADIW R26,3
0000d8 940e 0d77 	CALL __EEPROMRDB
                +
0000da 81aa     +LDD R26 , Y + 2
0000db 81bb     +LDD R27 , Y + 2 + 1
0000dc 9613     +ADIW R26 , 3
0000dd 93ec     +ST X , R30
                 	__PUTB1SNS 2,3
0000de 81a8      	LD   R26,Y
0000df 81b9      	LDD  R27,Y+1
0000e0 9614      	ADIW R26,4
0000e1 940e 0d77 	CALL __EEPROMRDB
                +
0000e3 81aa     +LDD R26 , Y + 2
0000e4 81bb     +LDD R27 , Y + 2 + 1
0000e5 9614     +ADIW R26 , 4
0000e6 93ec     +ST X , R30
                 	__PUTB1SNS 2,4
0000e7 81a8      	LD   R26,Y
0000e8 81b9      	LDD  R27,Y+1
0000e9 9615      	ADIW R26,5
0000ea 940e 0d77 	CALL __EEPROMRDB
                +
0000ec 81aa     +LDD R26 , Y + 2
0000ed 81bb     +LDD R27 , Y + 2 + 1
0000ee 9615     +ADIW R26 , 5
0000ef 93ec     +ST X , R30
                 	__PUTB1SNS 2,5
0000f0 81a8      	LD   R26,Y
0000f1 81b9      	LDD  R27,Y+1
0000f2 9616      	ADIW R26,6
0000f3 940e 0d77 	CALL __EEPROMRDB
                +
0000f5 81aa     +LDD R26 , Y + 2
0000f6 81bb     +LDD R27 , Y + 2 + 1
0000f7 9616     +ADIW R26 , 6
0000f8 93ec     +ST X , R30
                 	__PUTB1SNS 2,6
0000f9 81a8      	LD   R26,Y
0000fa 81b9      	LDD  R27,Y+1
0000fb 9617      	ADIW R26,7
0000fc 940e 0d77 	CALL __EEPROMRDB
                +
0000fe 81aa     +LDD R26 , Y + 2
0000ff 81bb     +LDD R27 , Y + 2 + 1
000100 9617     +ADIW R26 , 7
000101 93ec     +ST X , R30
                 	__PUTB1SNS 2,7
000102 81a8      	LD   R26,Y
000103 81b9      	LDD  R27,Y+1
000104 9618      	ADIW R26,8
000105 940e 0d77 	CALL __EEPROMRDB
                +
000107 81aa     +LDD R26 , Y + 2
000108 81bb     +LDD R27 , Y + 2 + 1
000109 9618     +ADIW R26 , 8
00010a 93ec     +ST X , R30
                 	__PUTB1SNS 2,8
00010b 9624      	ADIW R28,4
00010c 9508      	RET
                 ;	data -> Y+1
                 ;	bc -> R16
                 ;	dec -> Y+5
                 ;	bcd -> R16
                 ;	n -> R17
                 ;	dig -> R18
                 ;	num -> R19
                 ;	count -> R20
                 
                 	.DSEG
                    .equ __i2c_port=0x15 ;PORTC
                    .equ __sda_bit=1
                    .equ __scl_bit=0
                 
                 	.CSEG
                 ;	_param -> Y+1
                 ;	result -> R16
                 ;	_param -> Y+1
                 ;	_value -> Y+0
                 ;	*wholeT -> Y+2
                 ;	*divT -> Y+0
                 ;	min1 -> Y+0
                 ;	hour1 -> Y+0
                 ;	sec1 -> Y+0
                 ;	wday1 -> Y+0
                 ;	day1 -> Y+0
                 ;	month1 -> Y+0
                 ;	year1 -> Y+0
                 _read_adc:
                 ;	adc_input -> Y+0
00010d 81e8      	LD   R30,Y
00010e 64e0      	ORI  R30,0x40
00010f b9e7      	OUT  0x7,R30
                +
000110 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000111 958a     +DEC R24
000112 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000113 9a36      	SBI  0x6,6
                 _0xA:
000114 9b34      	SBIS 0x6,4
000115 cffe      	RJMP _0xA
000116 9a34      	SBI  0x6,4
000117 b1e4      	IN   R30,0x4
000118 b1f5      	IN   R31,0x4+1
000119 c0ce      	RJMP _0x2120008
                 _InitController:
00011a e0e0      	LDI  R30,LOW(0)
00011b bbeb      	OUT  0x1B,R30
00011c efee      	LDI  R30,LOW(254)
00011d bbea      	OUT  0x1A,R30
00011e e0e0      	LDI  R30,LOW(0)
00011f bbe8      	OUT  0x18,R30
000120 bbe7      	OUT  0x17,R30
000121 bbe5      	OUT  0x15,R30
000122 bbe4      	OUT  0x14,R30
000123 e0e3      	LDI  R30,LOW(3)
000124 bbe2      	OUT  0x12,R30
000125 e7ec      	LDI  R30,LOW(124)
000126 bbe1      	OUT  0x11,R30
000127 e0e0      	LDI  R30,LOW(0)
000128 bfe3      	OUT  0x33,R30
000129 bfe2      	OUT  0x32,R30
00012a bfec      	OUT  0x3C,R30
00012b bdef      	OUT  0x2F,R30
00012c e0e5      	LDI  R30,LOW(5)
00012d bdee      	OUT  0x2E,R30
00012e e0ef      	LDI  R30,LOW(15)
00012f bded      	OUT  0x2D,R30
000130 efef      	LDI  R30,LOW(255)
000131 bdec      	OUT  0x2C,R30
000132 e0e0      	LDI  R30,LOW(0)
000133 bde7      	OUT  0x27,R30
000134 bde6      	OUT  0x26,R30
000135 e8e2      	LDI  R30,LOW(130)
000136 bdeb      	OUT  0x2B,R30
000137 e3e0      	LDI  R30,LOW(48)
000138 bdea      	OUT  0x2A,R30
000139 e0e0      	LDI  R30,LOW(0)
00013a bde2      	OUT  0x22,R30
00013b bde5      	OUT  0x25,R30
00013c bde4      	OUT  0x24,R30
00013d bde3      	OUT  0x23,R30
00013e bfe5      	OUT  0x35,R30
00013f bfe4      	OUT  0x34,R30
000140 e1e0      	LDI  R30,LOW(16)
000141 bfe9      	OUT  0x39,R30
000142 e0e0      	LDI  R30,LOW(0)
000143 b9eb      	OUT  0xB,R30
000144 ede8      	LDI  R30,LOW(216)
000145 b9ea      	OUT  0xA,R30
000146 e8e6      	LDI  R30,LOW(134)
000147 bde0      	OUT  0x20,R30
000148 e0e0      	LDI  R30,LOW(0)
000149 bde0      	OUT  0x20,R30
00014a e3e3      	LDI  R30,LOW(51)
00014b b9e9      	OUT  0x9,R30
00014c e8e0      	LDI  R30,LOW(128)
00014d b9e8      	OUT  0x8,R30
00014e e0e0      	LDI  R30,LOW(0)
00014f bfe0      	OUT  0x30,R30
000150 b9e6      	OUT  0x6,R30
000151 b9ed      	OUT  0xD,R30
000152 bfe6      	OUT  0x36,R30
000153 e4e0      	LDI  R30,LOW(64)
000154 b9e7      	OUT  0x7,R30
000155 e8e6      	LDI  R30,LOW(134)
000156 b9e6      	OUT  0x6,R30
000157 940e 0bb9 	CALL _w1_init
000159 9508      	RET
                 _usart_rx_isr:
00015a 93aa      	ST   -Y,R26
00015b 93ea      	ST   -Y,R30
00015c 93fa      	ST   -Y,R31
00015d b7ef      	IN   R30,SREG
00015e 93ea      	ST   -Y,R30
00015f 931a      	ST   -Y,R17
000160 930a      	ST   -Y,R16
                 ;	status -> R16
                 ;	data -> R17
000161 b10b      	IN   R16,11
000162 b11c      	IN   R17,12
000163 2fe0      	MOV  R30,R16
000164 71ec      	ANDI R30,LOW(0x1C)
000165 f4d9      	BRNE _0xD
000166 91e0 0316 	LDS  R30,_rx_wr_index
000168 5fef      	SUBI R30,-LOW(1)
000169 93e0 0316 	STS  _rx_wr_index,R30
00016b 940e 0a75 	CALL SUBOPT_0x0
00016d 8310      	ST   Z,R17
00016e 91a0 0316 	LDS  R26,_rx_wr_index
000170 32a0      	CPI  R26,LOW(0x20)
000171 f419      	BRNE _0xE
000172 e0e0      	LDI  R30,LOW(0)
000173 93e0 0316 	STS  _rx_wr_index,R30
                 _0xE:
000175 91a0 0318 	LDS  R26,_rx_counter
000177 5faf      	SUBI R26,-LOW(1)
000178 93a0 0318 	STS  _rx_counter,R26
00017a 32a0      	CPI  R26,LOW(0x20)
00017b f429      	BRNE _0xF
00017c e0e0      	LDI  R30,LOW(0)
00017d 93e0 0318 	STS  _rx_counter,R30
00017f 9468      	SET
000180 f821      	BLD  R2,1
                 _0xF:
                 _0xD:
000181 9109      	LD   R16,Y+
000182 9119      	LD   R17,Y+
000183 c03a      	RJMP _0xFF
                 _getchar:
000184 930a      	ST   -Y,R16
                 ;	data -> R16
                 _0x10:
000185 91e0 0318 	LDS  R30,_rx_counter
000187 30e0      	CPI  R30,0
000188 f3e1      	BREQ _0x10
000189 91e0 0317 	LDS  R30,_rx_rd_index
00018b 5fef      	SUBI R30,-LOW(1)
00018c 93e0 0317 	STS  _rx_rd_index,R30
00018e 940e 0a75 	CALL SUBOPT_0x0
000190 8100      	LD   R16,Z
000191 91a0 0317 	LDS  R26,_rx_rd_index
000193 32a0      	CPI  R26,LOW(0x20)
000194 f419      	BRNE _0x13
000195 e0e0      	LDI  R30,LOW(0)
000196 93e0 0317 	STS  _rx_rd_index,R30
                 _0x13:
000198 94f8      	cli
000199 91e0 0318 	LDS  R30,_rx_counter
00019b 50e1      	SUBI R30,LOW(1)
00019c 93e0 0318 	STS  _rx_counter,R30
00019e 9478      	sei
00019f 2fe0      	MOV  R30,R16
0001a0 9109      	LD   R16,Y+
0001a1 9508      	RET
                 _usart_tx_isr:
0001a2 93aa      	ST   -Y,R26
0001a3 93ea      	ST   -Y,R30
0001a4 93fa      	ST   -Y,R31
0001a5 b7ef      	IN   R30,SREG
0001a6 93ea      	ST   -Y,R30
0001a7 91e0 0323 	LDS  R30,_tx_counter
0001a9 30e0      	CPI  R30,0
0001aa f099      	BREQ _0x14
0001ab 50e1      	SUBI R30,LOW(1)
0001ac 93e0 0323 	STS  _tx_counter,R30
0001ae 91e0 0322 	LDS  R30,_tx_rd_index
0001b0 5fef      	SUBI R30,-LOW(1)
0001b1 93e0 0322 	STS  _tx_rd_index,R30
0001b3 940e 0a7a 	CALL SUBOPT_0x1
0001b5 81e0      	LD   R30,Z
0001b6 b9ec      	OUT  0xC,R30
0001b7 91a0 0322 	LDS  R26,_tx_rd_index
0001b9 30a8      	CPI  R26,LOW(0x8)
0001ba f419      	BRNE _0x15
0001bb e0e0      	LDI  R30,LOW(0)
0001bc 93e0 0322 	STS  _tx_rd_index,R30
                 _0x15:
                 _0x14:
                 _0xFF:
0001be 91e9      	LD   R30,Y+
0001bf bfef      	OUT  SREG,R30
0001c0 91f9      	LD   R31,Y+
0001c1 91e9      	LD   R30,Y+
0001c2 91a9      	LD   R26,Y+
0001c3 9518      	RETI
                 _putchar:
                 ;	c -> Y+0
                 _0x16:
0001c4 91a0 0323 	LDS  R26,_tx_counter
0001c6 30a8      	CPI  R26,LOW(0x8)
0001c7 f3e1      	BREQ _0x16
0001c8 94f8      	cli
0001c9 91e0 0323 	LDS  R30,_tx_counter
0001cb 30e0      	CPI  R30,0
0001cc f411      	BRNE _0x1A
0001cd 995d      	SBIC 0xB,5
0001ce c016      	RJMP _0x19
                 _0x1A:
0001cf 91e0 0321 	LDS  R30,_tx_wr_index
0001d1 5fef      	SUBI R30,-LOW(1)
0001d2 93e0 0321 	STS  _tx_wr_index,R30
0001d4 940e 0a7a 	CALL SUBOPT_0x1
0001d6 81a8      	LD   R26,Y
0001d7 83a0      	STD  Z+0,R26
0001d8 91a0 0321 	LDS  R26,_tx_wr_index
0001da 30a8      	CPI  R26,LOW(0x8)
0001db f419      	BRNE _0x1C
0001dc e0e0      	LDI  R30,LOW(0)
0001dd 93e0 0321 	STS  _tx_wr_index,R30
                 _0x1C:
0001df 91e0 0323 	LDS  R30,_tx_counter
0001e1 5fef      	SUBI R30,-LOW(1)
0001e2 93e0 0323 	STS  _tx_counter,R30
0001e4 c002      	RJMP _0x1D
                 _0x19:
0001e5 81e8      	LD   R30,Y
0001e6 b9ec      	OUT  0xC,R30
                 _0x1D:
0001e7 9478      	sei
                 _0x2120008:
0001e8 9621      	ADIW R28,1
0001e9 9508      	RET
                 _PurgeUsart:
0001ea 94f8      	cli
0001eb e0e0      	LDI  R30,LOW(0)
0001ec 93e0 0318 	STS  _rx_counter,R30
0001ee 93e0 0316 	STS  _rx_wr_index,R30
0001f0 93e0 0317 	STS  _rx_rd_index,R30
0001f2 9478      	sei
0001f3 9508      	RET
                 _CmdLost:
                 ;	needReadBytes -> Y+1
                 ;	timeOut -> Y+0
0001f4 81e8      	LD   R30,Y
0001f5 e0f0      	LDI  R31,0
0001f6 940e 0a7f 	CALL SUBOPT_0x2
0001f8 91e0 0318 	LDS  R30,_rx_counter
0001fa 81a9      	LDD  R26,Y+1
0001fb 17ea      	CP   R30,R26
0001fc f411      	BRNE _0x1E
0001fd e0e0      	LDI  R30,LOW(0)
0001fe c002      	RJMP _0x2120007
                 _0x1E:
0001ff dfea      	RCALL _PurgeUsart
000200 e0e1      	LDI  R30,LOW(1)
                 _0x2120007:
000201 9622      	ADIW R28,2
000202 9508      	RET
                 _GetTemper:
000203 9724      	SBIW R28,4
000204 931a      	ST   -Y,R17
000205 930a      	ST   -Y,R16
                 ;	addr -> Y+6
                 ;	Temp -> R16,R17
                 ;	fTemp -> Y+2
                +
000206 ea06     +LDI R16 , LOW ( - 90 )
000207 ef1f     +LDI R17 , HIGH ( - 90 )
                 	__GETWRN 16,17,-90
000208 940e 0a83 	CALL SUBOPT_0x3
00020a 81a0      	LD   R26,Z
00020b 32a8      	CPI  R26,LOW(0x28)
00020c f011      	BREQ PC+3
00020d 940c 025a 	JMP _0x20
00020f 940e 0a83 	CALL SUBOPT_0x3
000211 93fa      	ST   -Y,R31
000212 93ea      	ST   -Y,R30
000213 d59a      	RCALL _ds18b20_temperature
                +
000214 83ea     +STD Y + 2 , R30
000215 83fb     +STD Y + 2 + 1 , R31
000216 836c     +STD Y + 2 + 2 , R22
000217 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000218 81ad      	LDD  R26,Y+5
000219 23aa      	TST  R26
00021a f422      	BRPL _0x21
00021b 940e 0a8a 	CALL SUBOPT_0x4
00021d e0a1      	LDI  R26,LOW(1)
00021e c003      	RJMP _0xF1
                 _0x21:
00021f 940e 0a8a 	CALL SUBOPT_0x4
000221 e0a0      	LDI  R26,LOW(0)
                 _0xF1:
000222 83a0      	STD  Z+0,R26
                +
000223 81ea     +LDD R30 , Y + 2
000224 81fb     +LDD R31 , Y + 2 + 1
000225 816c     +LDD R22 , Y + 2 + 2
000226 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
000227 940e 0c4e 	CALL __CFD1
000229 93fa      	ST   -Y,R31
00022a 93ea      	ST   -Y,R30
00022b 940e 0a8f 	CALL SUBOPT_0x5
00022d 93ff      	PUSH R31
00022e 93ef      	PUSH R30
                +
00022f 81aa     +LDD R26 , Y + 2
000230 81bb     +LDD R27 , Y + 2 + 1
000231 818c     +LDD R24 , Y + 2 + 2
000232 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
                +
000233 e0e0     +LDI R30 , LOW ( 0x41200000 )
000234 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000235 e260     +LDI R22 , BYTE3 ( 0x41200000 )
000236 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000237 940e 0cb3 	CALL __MULF12
000239 91af      	POP  R26
00023a 91bf      	POP  R27
00023b 940e 0c4e 	CALL __CFD1
00023d 940e 0a9b 	CALL SUBOPT_0x6
00023f 93ff      	PUSH R31
000240 93ef      	PUSH R30
000241 81ee      	LDD  R30,Y+6
000242 eaac      	LDI  R26,LOW(_TempDec)
000243 e0b2      	LDI  R27,HIGH(_TempDec)
000244 940e 0aa6 	CALL SUBOPT_0x7
000246 0fae      	ADD  R26,R30
000247 1fbf      	ADC  R27,R31
000248 940e 0d6a 	CALL __GETW1P
00024a 93fa      	ST   -Y,R31
00024b 93ea      	ST   -Y,R30
00024c 940e 08af 	CALL _abs
00024e 91af      	POP  R26
00024f 91bf      	POP  R27
000250 940e 0a9b 	CALL SUBOPT_0x6
000252 01bf      	MOVW R22,R30
000253 01df      	MOVW R26,R30
000254 940e 0d6a 	CALL __GETW1P
000256 01df      	MOVW R26,R30
000257 940e 0aaa 	CALL SUBOPT_0x8
000259 c01e      	RJMP _0x23
                 _0x20:
00025a 940e 0a83 	CALL SUBOPT_0x3
00025c 93fa      	ST   -Y,R31
00025d 93ea      	ST   -Y,R30
00025e d4e8      	RCALL _ds1820_temperature_10
00025f 018f      	MOVW R16,R30
000260 2311      	TST  R17
000261 f422      	BRPL _0x24
000262 940e 0a8a 	CALL SUBOPT_0x4
000264 e0a1      	LDI  R26,LOW(1)
000265 c003      	RJMP _0xF2
                 _0x24:
000266 940e 0a8a 	CALL SUBOPT_0x4
000268 e0a0      	LDI  R26,LOW(0)
                 _0xF2:
000269 83a0      	STD  Z+0,R26
00026a 931a      	ST   -Y,R17
00026b 930a      	ST   -Y,R16
00026c 940e 0a8f 	CALL SUBOPT_0x5
00026e 01bf      	MOVW R22,R30
00026f 01d8      	MOVW R26,R16
000270 940e 0aaa 	CALL SUBOPT_0x8
000272 01d8      	MOVW R26,R16
000273 e0ea      	LDI  R30,LOW(10)
000274 e0f0      	LDI  R31,HIGH(10)
000275 940e 0d49 	CALL __DIVW21
000277 018f      	MOVW R16,R30
                 _0x23:
000278 e0ef      	LDI  R30,LOW(9999)
000279 e2f7      	LDI  R31,HIGH(9999)
00027a 17e0      	CP   R30,R16
00027b 07f1      	CPC  R31,R17
00027c f029      	BREQ _0x27
00027d eee7      	LDI  R30,LOW(999)
00027e e0f3      	LDI  R31,HIGH(999)
00027f 17e0      	CP   R30,R16
000280 07f1      	CPC  R31,R17
000281 f419      	BRNE _0x26
                 _0x27:
000282 eae6      	LDI  R30,LOW(65446)
000283 efff      	LDI  R31,HIGH(65446)
000284 c001      	RJMP _0x2120006
                 _0x26:
000285 01f8      	MOVW R30,R16
                 _0x2120006:
000286 8119      	LDD  R17,Y+1
000287 8108      	LDD  R16,Y+0
000288 9627      	ADIW R28,7
000289 9508      	RET
                 _LCD_Show:
00028a 940e 083c 	CALL _lcd_clear
00028c 91e0 02ec 	LDS  R30,_lcd_screen
00028e 30e0      	CPI  R30,0
00028f f011      	BREQ PC+3
000290 940c 0347 	JMP _0x29
000292 e0e0      	LDI  R30,LOW(0)
000293 93ea      	ST   -Y,R30
000294 93ea      	ST   -Y,R30
000295 940e 082b 	CALL _lcd_gotoxy
000297 940e 0ab2 	CALL SUBOPT_0x9
000299 3ae6      	CPI  R30,LOW(0xFFA6)
00029a efaf      	LDI  R26,HIGH(0xFFA6)
00029b 07fa      	CPC  R31,R26
00029c f0f1      	BREQ _0x2A
                +
00029d 91e0 02b3+LDS R30 , _Sign + ( 1 )
                 	__GETB1MN _Sign,1
00029f 30e0      	CPI  R30,0
0002a0 f029      	BREQ _0x2B
0002a1 940e 0ab7 	CALL SUBOPT_0xA
                +
0002a3 e8e2     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0002a4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0002a5 c004      	RJMP _0xF3
                 _0x2B:
0002a6 940e 0ab7 	CALL SUBOPT_0xA
                +
0002a8 e8eb     +LDI R30 , LOW ( 2 * _0x0 + ( 9 ) )
0002a9 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 9 ) )
                 	__POINTW1FN _0x0,9
                 _0xF3:
0002aa 93fa      	ST   -Y,R31
0002ab 93ea      	ST   -Y,R30
0002ac 940e 0ab2 	CALL SUBOPT_0x9
0002ae 940e 0abc 	CALL SUBOPT_0xB
                +
0002b0 91e0 02ae+LDS R30 , _TempDec + ( 2 )
0002b2 91f0 02af+LDS R31 , _TempDec + ( 2 ) + 1
                 	__GETW1MN _TempDec,2
0002b4 940e 0abc 	CALL SUBOPT_0xB
0002b6 940e 0ac1 	CALL SUBOPT_0xC
0002b8 e2e4      	LDI  R30,LOW(_lcd_buffer)
0002b9 e0f3      	LDI  R31,HIGH(_lcd_buffer)
0002ba c002      	RJMP _0xF4
                 _0x2A:
                +
0002bb e6e0     +LDI R30 , LOW ( _0x2E + ( 0 ) )
0002bc e0f2     +LDI R31 , HIGH ( _0x2E + ( 0 ) )
                 	__POINTW1MN _0x2E,0
                 _0xF4:
0002bd 93fa      	ST   -Y,R31
0002be 93ea      	ST   -Y,R30
0002bf 940e 086c 	CALL _lcd_puts
0002c1 e0e8      	LDI  R30,LOW(8)
0002c2 93ea      	ST   -Y,R30
0002c3 e0e0      	LDI  R30,LOW(0)
0002c4 93ea      	ST   -Y,R30
0002c5 940e 082b 	CALL _lcd_gotoxy
0002c7 940e 0ac6 	CALL SUBOPT_0xD
0002c9 3aa6      	CPI  R26,LOW(0xFFA6)
0002ca efef      	LDI  R30,HIGH(0xFFA6)
0002cb 07be      	CPC  R27,R30
0002cc f101      	BREQ _0x2F
0002cd 91e0 02b2 	LDS  R30,_Sign
0002cf 30e0      	CPI  R30,0
0002d0 f029      	BREQ _0x30
0002d1 940e 0ab7 	CALL SUBOPT_0xA
                +
0002d3 e8e2     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0002d4 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0002d5 c004      	RJMP _0xF5
                 _0x30:
0002d6 940e 0ab7 	CALL SUBOPT_0xA
                +
0002d8 e8eb     +LDI R30 , LOW ( 2 * _0x0 + ( 9 ) )
0002d9 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 9 ) )
                 	__POINTW1FN _0x0,9
                 _0xF5:
0002da 93fa      	ST   -Y,R31
0002db 93ea      	ST   -Y,R30
0002dc 91e0 02a6 	LDS  R30,_Temperature
0002de 91f0 02a7 	LDS  R31,_Temperature+1
0002e0 940e 0abc 	CALL SUBOPT_0xB
0002e2 91e0 02ac 	LDS  R30,_TempDec
0002e4 91f0 02ad 	LDS  R31,_TempDec+1
0002e6 940e 0abc 	CALL SUBOPT_0xB
0002e8 940e 0ac1 	CALL SUBOPT_0xC
0002ea e2e4      	LDI  R30,LOW(_lcd_buffer)
0002eb e0f3      	LDI  R31,HIGH(_lcd_buffer)
0002ec c002      	RJMP _0xF6
                 _0x2F:
                +
0002ed e6e7     +LDI R30 , LOW ( _0x2E + ( 7 ) )
0002ee e0f2     +LDI R31 , HIGH ( _0x2E + ( 7 ) )
                 	__POINTW1MN _0x2E,7
                 _0xF6:
0002ef 93fa      	ST   -Y,R31
0002f0 93ea      	ST   -Y,R30
0002f1 940e 086c 	CALL _lcd_puts
0002f3 940e 0acb 	CALL SUBOPT_0xE
0002f5 940e 0ad1 	CALL SUBOPT_0xF
0002f7 3ae6      	CPI  R30,LOW(0xFFA6)
0002f8 efaf      	LDI  R26,HIGH(0xFFA6)
0002f9 07fa      	CPC  R31,R26
0002fa f0f1      	BREQ _0x33
                +
0002fb 91a0 02b4+LDS R26 , _Sign + ( 2 )
                 	__GETB2MN _Sign,2
0002fd 30a1      	CPI  R26,LOW(0x1)
0002fe f429      	BRNE _0x34
0002ff 940e 0ab7 	CALL SUBOPT_0xA
                +
000301 e8e2     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000302 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000303 c004      	RJMP _0xF7
                 _0x34:
000304 940e 0ab7 	CALL SUBOPT_0xA
                +
000306 e8eb     +LDI R30 , LOW ( 2 * _0x0 + ( 9 ) )
000307 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 9 ) )
                 	__POINTW1FN _0x0,9
                 _0xF7:
000308 93fa      	ST   -Y,R31
000309 93ea      	ST   -Y,R30
00030a 940e 0ad1 	CALL SUBOPT_0xF
00030c 940e 0abc 	CALL SUBOPT_0xB
                +
00030e 91e0 02b0+LDS R30 , _TempDec + ( 4 )
000310 91f0 02b1+LDS R31 , _TempDec + ( 4 ) + 1
                 	__GETW1MN _TempDec,4
000312 940e 0abc 	CALL SUBOPT_0xB
000314 940e 0ac1 	CALL SUBOPT_0xC
000316 e2e4      	LDI  R30,LOW(_lcd_buffer)
000317 e0f3      	LDI  R31,HIGH(_lcd_buffer)
000318 c002      	RJMP _0xF8
                 _0x33:
                +
000319 e6ee     +LDI R30 , LOW ( _0x2E + ( 14 ) )
00031a e0f2     +LDI R31 , HIGH ( _0x2E + ( 14 ) )
                 	__POINTW1MN _0x2E,14
                 _0xF8:
00031b 93fa      	ST   -Y,R31
00031c 93ea      	ST   -Y,R30
00031d 940e 086c 	CALL _lcd_puts
00031f e0e8      	LDI  R30,LOW(8)
000320 93ea      	ST   -Y,R30
000321 e0e1      	LDI  R30,LOW(1)
000322 93ea      	ST   -Y,R30
000323 940e 082b 	CALL _lcd_gotoxy
000325 940e 0ab7 	CALL SUBOPT_0xA
                +
000327 e9eb     +LDI R30 , LOW ( 2 * _0x0 + ( 25 ) )
000328 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW1FN _0x0,25
000329 93fa      	ST   -Y,R31
00032a 93ea      	ST   -Y,R30
00032b e0e0      	LDI  R30,LOW(0)
00032c 93ea      	ST   -Y,R30
00032d dddf      	RCALL _read_adc
00032e e6a4      	LDI  R26,LOW(100)
00032f e0b0      	LDI  R27,HIGH(100)
000330 940e 0d29 	CALL __MULW12U
000332 940e 0d1a 	CALL __LSRW2
000334 2fef      	MOV  R30,R31
000335 e0f0      	LDI  R31,0
000336 2766      	CLR  R22
000337 2777      	CLR  R23
000338 940e 0d72 	CALL __PUTPARD1
00033a e0e0      	LDI  R30,LOW(0)
00033b 93ea      	ST   -Y,R30
00033c ddd0      	RCALL _read_adc
00033d 2766      	CLR  R22
00033e 2777      	CLR  R23
00033f 940e 0d72 	CALL __PUTPARD1
000341 940e 0ac1 	CALL SUBOPT_0xC
000343 940e 0ab7 	CALL SUBOPT_0xA
000345 940e 086c 	CALL _lcd_puts
                 _0x29:
000347 9508      	RET
                 
                 	.DSEG
                 _0x2E:
000260           	.BYTE 0x15
                 ;
                 ;#asm
                    .equ __w1_port=0x12 ;PORTD               // настраиваем порт D bit6 на шину 1-wire 20 ножка ATMega32
                    .equ __w1_bit=6
                 ; 0000 0026 #endasm
                 ;
                 ;/*
                 ;// Timer 0 прерывание по таймеру
                 ;interrupt [TIM0_COMPA] void timer0_timer(void) // TIM0_COMP[A|B]  TIM0_OVF
                 ;{
                 ;	 //tLimit = 0;                // сбросить флаг таймаута (время вышло)
                 ;	 // PORTB.7 = !PORTB.7;    // инвертирование сигнала  DP тест
                 ;}
                 ;*/
                 ;// ----------------------------------------------------------------------------
                 ;
                 ;// Timer 1 прерывание по таймеру (основной цикл обработки данных)
                 ;interrupt [TIM1_COMPA] void timer1_timer(void) // TIM1_COMP[A|B]  TIM0_OVF
                 ; 0000 0034 {
                 
                 	.CSEG
                 _timer1_timer:
000348 920a      	ST   -Y,R0
000349 921a      	ST   -Y,R1
00034a 92fa      	ST   -Y,R15
00034b 936a      	ST   -Y,R22
00034c 937a      	ST   -Y,R23
00034d 938a      	ST   -Y,R24
00034e 939a      	ST   -Y,R25
00034f 93aa      	ST   -Y,R26
000350 93ba      	ST   -Y,R27
000351 93ea      	ST   -Y,R30
000352 93fa      	ST   -Y,R31
000353 b7ef      	IN   R30,SREG
000354 93ea      	ST   -Y,R30
                 ; 0000 0035 	if(Errcount == 0 && AutoRestoration == 1){StokerMode = 0;}; // при восстановлении связи с датчиком, возобновить автоматическое управление от датчиков
000355 91a0 02d7 	LDS  R26,_Errcount
000357 30a0      	CPI  R26,LOW(0x0)
000358 f431      	BRNE _0x3A
000359 e2a2      	LDI  R26,LOW(_AutoRestoration)
00035a e0b0      	LDI  R27,HIGH(_AutoRestoration)
00035b 940e 0d77 	CALL __EEPROMRDB
00035d 30e1      	CPI  R30,LOW(0x1)
00035e f009      	BREQ _0x3B
                 _0x3A:
00035f c005      	RJMP _0x39
                 _0x3B:
000360 e1ae      	LDI  R26,LOW(_StokerMode)
000361 e0b0      	LDI  R27,HIGH(_StokerMode)
000362 e0e0      	LDI  R30,LOW(0)
000363 940e 0d83 	CALL __EEPROMWRB
                 _0x39:
                 ; 0000 0036 
                 ; 0000 0037 	if( StokerMode == 0 || MeasureTemp == 1 || AutoRestoration == 1)  // опрос датчиков: если (включено управление от датчиков ) или (включено принудительное измерение температуры) или разрешено восстановление
000365 e1ae      	LDI  R26,LOW(_StokerMode)
000366 e0b0      	LDI  R27,HIGH(_StokerMode)
000367 940e 0d77 	CALL __EEPROMRDB
000369 30e0      	CPI  R30,0
00036a f049      	BREQ _0x3D
00036b fc20      	SBRC R2,0
00036c c007      	RJMP _0x3D
00036d e2a2      	LDI  R26,LOW(_AutoRestoration)
00036e e0b0      	LDI  R27,HIGH(_AutoRestoration)
00036f 940e 0d77 	CALL __EEPROMRDB
000371 30e1      	CPI  R30,LOW(0x1)
000372 f009      	BREQ _0x3D
000373 c046      	RJMP _0x3C
                 _0x3D:
                 ; 0000 0038 	{
                 ; 0000 0039 		for(k1 = 0; k1 < ds1820_devices; k1++) // опрос датчиков;
000374 e0e0      	LDI  R30,LOW(0)
000375 93e0 02d8 	STS  _k1,R30
                 _0x40:
000377 91e0 02a5 	LDS  R30,_ds1820_devices
000379 91a0 02d8 	LDS  R26,_k1
00037b 17ae      	CP   R26,R30
00037c f5e8      	BRSH _0x41
                 ; 0000 003A 		// k1 = ++k1 % ds1820_devices;   // опрос по 1 датчику за прерывание, чтобы уменьшить время ожидания отклика команды
                 ; 0000 003B 		{
                 ; 0000 003C 			//Temperature[k1] = GetTemper(&ds1820_sn[k1][0]); // только целая часть
                 ; 0000 003D 			Temperature[k1] = GetTemper(k1);
00037d 940e 0ad6 	CALL SUBOPT_0x10
00037f 0fea      	ADD  R30,R26
000380 1ffb      	ADC  R31,R27
000381 93ff      	PUSH R31
000382 93ef      	PUSH R30
000383 91e0 02d8 	LDS  R30,_k1
000385 93ea      	ST   -Y,R30
000386 de7c      	RCALL _GetTemper
000387 91af      	POP  R26
000388 91bf      	POP  R27
000389 93ed      	ST   X+,R30
00038a 93fc      	ST   X,R31
                 ; 0000 003E 
                 ; 0000 003F 			/*
                 ; 0000 0040 			#ifdef SAVETEMPER
                 ; 0000 0041 			// if(таймаут сохранения){} // реализовать !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                 ; 0000 0042 			//if(k1 == 0){SaveTemper(Temperature[k1]);}; // сохранить в энергонезависимую память, значение температуры возможно с ошибками !
                 ; 0000 0043 			SaveTemper(Temperature[k1],k);
                 ; 0000 0044 			#endif
                 ; 0000 0045 			*/
                 ; 0000 0046 
                 ; 0000 0047 			if(Temperature[k1] == -90) // ошибка получения данных от датчика ds1820.h
00038b 940e 0ad6 	CALL SUBOPT_0x10
00038d 0fae      	ADD  R26,R30
00038e 1fbf      	ADC  R27,R31
00038f 940e 0d6a 	CALL __GETW1P
000391 3ae6      	CPI  R30,LOW(0xFFA6)
000392 efaf      	LDI  R26,HIGH(0xFFA6)
000393 07fa      	CPC  R31,R26
000394 f4c1      	BRNE _0x42
                 ; 0000 0048 			{
                 ; 0000 0049 				//PORTA.5 = 1;          // отказ датчика
                 ; 0000 004A 
                 ; 0000 004B 				if(k1 == 0 && (StokerMode == 0) )  // датчик на радиаторе и режим управления от датчиков
000395 91a0 02d8 	LDS  R26,_k1
000397 30a0      	CPI  R26,LOW(0x0)
000398 f421      	BRNE _0x44
000399 940e 0adb 	CALL SUBOPT_0x11
00039b 30e0      	CPI  R30,0
00039c f009      	BREQ _0x45
                 _0x44:
00039d c00e      	RJMP _0x43
                 _0x45:
                 ; 0000 004C 				{
                 ; 0000 004D 					Errcount++;                                                        // счетчик ошибок++ датчик на радиаторе
00039e 91e0 02d7 	LDS  R30,_Errcount
0003a0 5fef      	SUBI R30,-LOW(1)
0003a1 93e0 02d7 	STS  _Errcount,R30
                 ; 0000 004E 					if(Errcount >= 5){StokerMode = 1; TickCount = 0; /*PORTD.5 = 0;*/}; // (>60) --> переход в импульсный режим, включить аварийный светодиод PORTA.5 = 1, сброс настроек импульсного режима, начать с простоя (PORTD.5 = 0)??
0003a3 91a0 02d7 	LDS  R26,_Errcount
0003a5 30a5      	CPI  R26,LOW(0x5)
0003a6 f028      	BRLO _0x46
0003a7 e1ae      	LDI  R26,LOW(_StokerMode)
0003a8 e0b0      	LDI  R27,HIGH(_StokerMode)
0003a9 e0e1      	LDI  R30,LOW(1)
0003aa 940e 0ae0 	CALL SUBOPT_0x12
                 _0x46:
                 ; 0000 004F 					//continue; // продолжить for...  управлять... continue - по-любому
                 ; 0000 0050 				}
                 ; 0000 0051 
                 ; 0000 0052 				/*
                 ; 0000 0053 				else if(k1 == 1) {
                 ; 0000 0054 					//PORTA.5 = 1;          // отказ датчика
                 ; 0000 0055 				}
                 ; 0000 0056 				else if(k1 == 2) {
                 ; 0000 0057 					//PORTA.5 = 1;          // отказ датчика
                 ; 0000 0058 				}
                 ; 0000 0059 				*/
                 ; 0000 005A 
                 ; 0000 005B 				continue; // продолжить for...  управлять...
                 _0x43:
0003ac c007      	RJMP _0x3F
                 ; 0000 005C 			}
                 ; 0000 005D 			//else{ PORTA.5 = 0; }    // сброс отказа датчика
                 ; 0000 005E 
                 ; 0000 005F 			if(k1 == 0) {Errcount = 0;}; // сброс счетчика ошибок датчика на радиаторе
                 _0x42:
0003ad 91e0 02d8 	LDS  R30,_k1
0003af 30e0      	CPI  R30,0
0003b0 f419      	BRNE _0x47
0003b1 e0e0      	LDI  R30,LOW(0)
0003b2 93e0 02d7 	STS  _Errcount,R30
                 _0x47:
                 ; 0000 0060 		};
                 _0x3F:
0003b4 91e0 02d8 	LDS  R30,_k1
0003b6 5fef      	SUBI R30,-LOW(1)
0003b7 93e0 02d8 	STS  _k1,R30
0003b9 cfbd      	RJMP _0x40
                 _0x41:
                 ; 0000 0061 
                 ; 0000 0062 		//k1 = (k1+1)%ds1820_devices; // опрашивать по 1 датчику за цикл. распараллелить задачи (убрать for...)
                 ; 0000 0063 
                 ; 0000 0064 		#ifdef SAVETEMPER
                 ; 0000 0065 		if(SaveTimeOut == 37) // 8*37 = 296 c ~ 5 мин. | 8*75 = 600 c == 10 мин
                 ; 0000 0066 		{
                 ; 0000 0067 			SaveTemper(Temperature[k1],k1); // сохранить в энергонезависимую память, значение температуры возможно с ошибками !
                 ; 0000 0068 			SaveTimeOut = 0;
                 ; 0000 0069 		}
                 ; 0000 006A 		SaveTimeOut += 8;
                 ; 0000 006B 		#endif
                 ; 0000 006C 
                 ; 0000 006D 	} // \опрос датчиков
                 ; 0000 006E 
                 ; 0000 006F 	switch(StokerMode)	// 0 - авто; 1 - импульс; 2 -  принудительное включение; 3 - принудительное отключение
                 _0x3C:
0003ba 940e 0adb 	CALL SUBOPT_0x11
0003bc 940e 0ae8 	CALL SUBOPT_0x13
                 ; 0000 0070 	{
                 ; 0000 0071 		case 0x00:	// авто (управление от датчиков)
0003be f011      	BREQ PC+3
0003bf 940c 040b 	JMP _0x4B
                 ; 0000 0072 		{
                 ; 0000 0073 			PORTA.6 = 0;              // отключить индикатор
0003c1 98de      	CBI  0x1B,6
                 ; 0000 0074 			PORTA.7 = 1;              // индикатор режима работы от датчиков, мигание: PORTA.7 = !PORTA.7;
0003c2 9adf      	SBI  0x1B,7
                 ; 0000 0075 			// Temperature[0] - радиатор, Temperature[1] - котел, Temperature[2] - улица, T2k - 1 контур
                 ; 0000 0076 
                 ; 0000 0077 			MaxT1 = MaxT;                                        // расчетный верхний предел отключения насоса (если в котле меньше температуры чем верхняя уставка)
0003c3 e1ac      	LDI  R26,LOW(_MaxT)
0003c4 e0b0      	LDI  R27,HIGH(_MaxT)
0003c5 940e 0d77 	CALL __EEPROMRDB
0003c7 93e0 02d3 	STS  _MaxT1,R30
                 ; 0000 0078 			OnBlock = 1;                                         // блокировка включения 1 - включение разрешено (по умолчанию), 0 - включение заблокировано
0003c9 e0e1      	LDI  R30,LOW(1)
0003ca 93e0 02d4 	STS  _OnBlock,R30
                 ; 0000 0079 
                 ; 0000 007A 			if(Temperature[1] != -90)                            // датчик на котле работает
0003cc 940e 0ab2 	CALL SUBOPT_0x9
0003ce 3ae6      	CPI  R30,LOW(0xFFA6)
0003cf efaf      	LDI  R26,HIGH(0xFFA6)
0003d0 07fa      	CPC  R31,R26
0003d1 f0d1      	BREQ _0x50
                 ; 0000 007B 			{
                 ; 0000 007C 				//if(Temperature[1] <= MinT){OnBlock = 0;}                      // заблокировать включение! ???
                 ; 0000 007D 				if(Temperature[1] < MinTCaldron){OnBlock = 0; PORTD.5 = 0;}      // отключить и заблокировать включение! если температура в котле < "30" (нет смысла гонять насос)
0003d2 e1ad      	LDI  R26,LOW(_MinTCaldron)
0003d3 e0b0      	LDI  R27,HIGH(_MinTCaldron)
0003d4 940e 0d77 	CALL __EEPROMRDB
                +
0003d6 91a0 02a8+LDS R26 , _Temperature + ( 2 )
0003d8 91b0 02a9+LDS R27 , _Temperature + ( 2 ) + 1
                 	__GETW2MN _Temperature,2
0003da 940e 0aeb 	CALL SUBOPT_0x14
0003dc f424      	BRGE _0x51
0003dd e0e0      	LDI  R30,LOW(0)
0003de 93e0 02d4 	STS  _OnBlock,R30
0003e0 9895      	CBI  0x12,5
                 ; 0000 007E 				// if(Temperature[0] >= Temperature[1]){OnBlock = 0;}  // PORTD.5 = 0; заблокировать включение! если температура в радиаторе >= температура в котле ??? - может быть есть смысл перекачать кипяток вниз
                 ; 0000 007F 				// if(Temperature[1] < MaxT){MaxT1 = Temperature[1];}  // передвинуть максимальный предел, если температура в котле < макс. предела отключения
                 ; 0000 0080 				if(Temperature[0] >= Temperature[1]){PORTD.5 = 0; OnBlock = 0;} // температура воды в радиаторе достигла температуры в котле  !!!!!!!!!!!!!
                 _0x51:
0003e1 940e 0ab2 	CALL SUBOPT_0x9
0003e3 940e 0ac6 	CALL SUBOPT_0xD
0003e5 17ae      	CP   R26,R30
0003e6 07bf      	CPC  R27,R31
0003e7 f024      	BRLT _0x54
0003e8 9895      	CBI  0x12,5
0003e9 e0e0      	LDI  R30,LOW(0)
0003ea 93e0 02d4 	STS  _OnBlock,R30
                 ; 0000 0081 			}
                 _0x54:
                 ; 0000 0082 
                 ; 0000 0083 			/*
                 ; 0000 0084 			if(T2k != -90)                           // датчик на 1 контуре работает  (не используется)
                 ; 0000 0085 			{
                 ; 0000 0086 				if(T2k < Temperature[0]){OnBlock = 0;}    // температура в 1 контуре < температуры в 2 контуре -> заблокировать включение
                 ; 0000 0087 			}
                 ; 0000 0088 			*/
                 ; 0000 0089 
                 ; 0000 008A 			if(Temperature[0] != -90) // если датчик на радиаторе работает то управлять, иначе оставить все без изменений
                 _0x50:
0003ec 940e 0aef 	CALL SUBOPT_0x15
0003ee f0d9      	BREQ _0x57
                 ; 0000 008B 			{
                 ; 0000 008C 				// управление работой
                 ; 0000 008D 				if(PORTD.5 == 1) {  // насос работает
0003ef 9b95      	SBIS 0x12,5
0003f0 c009      	RJMP _0x58
                 ; 0000 008E 					if(Temperature[0] >= MaxT1) {PORTD.5 = 0;}      // выключить достигнут максимальный предел   MaxT1  !!!!!!!
0003f1 91e0 02d3 	LDS  R30,_MaxT1
0003f3 940e 0ac6 	CALL SUBOPT_0xD
0003f5 940e 0aeb 	CALL SUBOPT_0x14
0003f7 f00c      	BRLT _0x59
0003f8 9895      	CBI  0x12,5
                 ; 0000 008F 				} else {              // насос отключен
                 _0x59:
0003f9 c010      	RJMP _0x5C
                 _0x58:
                 ; 0000 0090 					if(Temperature[0] < MinT) {PORTD.5 = OnBlock;} //  достигнут минимальный предел -> попытаться включить
0003fa e1ab      	LDI  R26,LOW(_MinT)
0003fb e0b0      	LDI  R27,HIGH(_MinT)
0003fc 940e 0d77 	CALL __EEPROMRDB
0003fe 940e 0ac6 	CALL SUBOPT_0xD
000400 940e 0aeb 	CALL SUBOPT_0x14
000402 f43c      	BRGE _0x5D
000403 91e0 02d4 	LDS  R30,_OnBlock
000405 30e0      	CPI  R30,0
000406 f411      	BRNE _0x5E
000407 9895      	CBI  0x12,5
000408 c001      	RJMP _0x5F
                 _0x5E:
000409 9a95      	SBI  0x12,5
                 _0x5F:
                 ; 0000 0091 				}
                 _0x5D:
                 _0x5C:
                 ; 0000 0092 				// \управление работой
                 ; 0000 0093 			}
                 ; 0000 0094 		}
                 _0x57:
                 ; 0000 0095 		break;	// \режим работы от датчиков
00040a c038      	RJMP _0x4A
                 ; 0000 0096 
                 ; 0000 0097 		case 0x01:	// импульсный режим (управление по времени)
                 _0x4B:
00040b 30e1      	CPI  R30,LOW(0x1)
00040c e0a0      	LDI  R26,HIGH(0x1)
00040d 07fa      	CPC  R31,R26
00040e f529      	BRNE _0x60
                 ; 0000 0098 		{
                 ; 0000 0099 			PORTA.7 = 0;         // отключить индикатор
00040f 98df      	CBI  0x1B,7
                 ; 0000 009A 			PORTA.6 = 1;         // включить индикатор работы импульсного режима, мигание: PORTA.6 = !PORTA.6;
000410 9ade      	SBI  0x1B,6
                 ; 0000 009B 
                 ; 0000 009C 			TickCount += 8;      // настроить тик таймера, рассчитать время итерации !!! !!! !!! !!! !!! !!!
000411 91e0 02d5 	LDS  R30,_TickCount
000413 91f0 02d6 	LDS  R31,_TickCount+1
000415 9638      	ADIW R30,8
000416 93e0 02d5 	STS  _TickCount,R30
000418 93f0 02d6 	STS  _TickCount+1,R31
                 ; 0000 009D 
                 ; 0000 009E 			if(PORTD.5 == 1) {    // насос работает
00041a 9b95      	SBIS 0x12,5
00041b c00c      	RJMP _0x65
                 ; 0000 009F 				if(TickCount > WorkTime*60) {TickCount = 0; PORTD.5 = 0;} // выключить достигнуто максимальное время работы
00041c e1af      	LDI  R26,LOW(_WorkTime)
00041d e0b0      	LDI  R27,HIGH(_WorkTime)
00041e 940e 0af4 	CALL SUBOPT_0x16
000420 f430      	BRSH _0x66
000421 e0e0      	LDI  R30,LOW(0)
000422 93e0 02d5 	STS  _TickCount,R30
000424 93e0 02d6 	STS  _TickCount+1,R30
000426 9895      	CBI  0x12,5
                 ; 0000 00A0 			}
                 _0x66:
                 ; 0000 00A1 			else {                // насос отключен
000427 c00b      	RJMP _0x69
                 _0x65:
                 ; 0000 00A2 				if(TickCount > IdleTime*60) {TickCount = 0; PORTD.5 = 1;} // включить достигнуто максимальное время простоя
000428 e2a0      	LDI  R26,LOW(_IdleTime)
000429 e0b0      	LDI  R27,HIGH(_IdleTime)
00042a 940e 0af4 	CALL SUBOPT_0x16
00042c f430      	BRSH _0x6A
00042d e0e0      	LDI  R30,LOW(0)
00042e 93e0 02d5 	STS  _TickCount,R30
000430 93e0 02d6 	STS  _TickCount+1,R30
000432 9a95      	SBI  0x12,5
                 ; 0000 00A3 			}
                 _0x6A:
                 _0x69:
                 ; 0000 00A4 		}
                 ; 0000 00A5 		break;	// \импульсный режим
000433 c00f      	RJMP _0x4A
                 ; 0000 00A6 
                 ; 0000 00A7 		case 0x02:	// принудительное включение насоса
                 _0x60:
000434 30e2      	CPI  R30,LOW(0x2)
000435 e0a0      	LDI  R26,HIGH(0x2)
000436 07fa      	CPC  R31,R26
000437 f421      	BRNE _0x6D
                 ; 0000 00A8 		{
                 ; 0000 00A9 			PORTD.5 = 1;
000438 9a95      	SBI  0x12,5
                 ; 0000 00AA 			PORTA.6 = 1; PORTA.7 = 1;  // включить индикаторы
000439 9ade      	SBI  0x1B,6
00043a 9adf      	SBI  0x1B,7
                 ; 0000 00AB 		}
                 ; 0000 00AC 		break;
00043b c007      	RJMP _0x4A
                 ; 0000 00AD 
                 ; 0000 00AE 		case 0x03:	// принудительное отключение насоса
                 _0x6D:
00043c 30e3      	CPI  R30,LOW(0x3)
00043d e0a0      	LDI  R26,HIGH(0x3)
00043e 07fa      	CPC  R31,R26
00043f f419      	BRNE _0x4A
                 ; 0000 00AF 		{
                 ; 0000 00B0 			PORTD.5 = 0;
000440 9895      	CBI  0x12,5
                 ; 0000 00B1 			PORTA.6 = 0; PORTA.7 = 0;  // отключить индикаторы
000441 98de      	CBI  0x1B,6
000442 98df      	CBI  0x1B,7
                 ; 0000 00B2 		}
                 ; 0000 00B3 		break;
                 ; 0000 00B4 	}
                 _0x4A:
                 ; 0000 00B5 
                 ; 0000 00B6 	#ifdef LCD
                 ; 0000 00B7 	LCD_Show();
000443 de46      	RCALL _LCD_Show
                 ; 0000 00B8 	#endif
                 ; 0000 00B9 }
000444 91e9      	LD   R30,Y+
000445 bfef      	OUT  SREG,R30
000446 91f9      	LD   R31,Y+
000447 91e9      	LD   R30,Y+
000448 91b9      	LD   R27,Y+
000449 91a9      	LD   R26,Y+
00044a 9199      	LD   R25,Y+
00044b 9189      	LD   R24,Y+
00044c 9179      	LD   R23,Y+
00044d 9169      	LD   R22,Y+
00044e 90f9      	LD   R15,Y+
00044f 9019      	LD   R1,Y+
000450 9009      	LD   R0,Y+
000451 9518      	RETI
                 ;// ----------------------------------------------------------------------------
                 ;void main(void)
                 ; 0000 00BC {
                 _main:
                 ; 0000 00BD 	InitController();
000452 dcc7      	RCALL _InitController
                 ; 0000 00BE 
                 ; 0000 00BF  /*
                 ; 0000 00C0   ds18b20_init(     // - unsigned char - Радиатор
                 ; 0000 00C1                &ds1820_sn[0][0], // unsigned char *addr
                 ; 0000 00C2                -20,              // signed char temp_low
                 ; 0000 00C3                50,               //signed char temp_high
                 ; 0000 00C4                DS18B20_12BIT_RES); //DS18B20_12BIT_RES, DS18B20_11BIT_RES, DS18B20_10BIT_RES, DS18B20_9BIT_RES - resolution
                 ; 0000 00C5 
                 ; 0000 00C6   ds18b20_init(     // - unsigned char - Котел
                 ; 0000 00C7                &ds1820_sn[1][0], // unsigned char *addr
                 ; 0000 00C8                -20,              // signed char temp_low
                 ; 0000 00C9                50,               //signed char temp_high
                 ; 0000 00CA                DS18B20_12BIT_RES); //DS18B20_12BIT_RES, DS18B20_11BIT_RES, DS18B20_10BIT_RES, DS18B20_9BIT_RES - resolution
                 ; 0000 00CB  */
                 ; 0000 00CC 
                 ; 0000 00CD #ifdef TEST  // тестовый режим поиск и опрос любых датчиков
                 ; 0000 00CE 	ds1820_devices = w1_search(0xf0,ds1820_sn);           // поиск подключенных датчиков и их нумерация  // определение глючного датчика
                 ; 0000 00CF 
                 ; 0000 00D0 	// оперделение адреса Test
                 ; 0000 00D1 	lcd_init(16);
                 ; 0000 00D2 	lcd_clear();
                 ; 0000 00D3 	lcd_gotoxy(0, 0);
                 ; 0000 00D4 	sprintf(lcd_buffer,"%x %x %x %x %x %x %x %x %x",ds1820_sn[2][0], ds1820_sn[2][1], ds1820_sn[2][2], ds1820_sn[2][3], ds1820_sn[2][4], ds1820_sn[2][5], ds1820_sn[2][6], ds1820_sn[2][7], ds1820_sn[2][8]);
                 ; 0000 00D5 	lcd_puts(lcd_buffer);
                 ; 0000 00D6 
                 ; 0000 00D7 	delay_ms(3000);
                 ; 0000 00D8 	// оперделение адреса Test
                 ; 0000 00D9 
                 ; 0000 00DA 	if(ds1820_devices > 0) // если устройства найдены то прочитать мусор
                 ; 0000 00DB 	{
                 ; 0000 00DC 		for (i=0; i<ds1820_devices; i++)
                 ; 0000 00DD 		{
                 ; 0000 00DE 			//Temperature[i] = GetTemper(&ds1820_sn[i][0]); // прочитать мусор
                 ; 0000 00DF 			Temperature[0] = GetTemper(i);
                 ; 0000 00E0 		}
                 ; 0000 00E1 	}
                 ; 0000 00E2 #else // штатный режим
                 ; 0000 00E3 	//ds1820_devices = 3;  // подключено 3 датчика
                 ; 0000 00E4 
                 ; 0000 00E5 	sncpy(ds1820_sn[0],ds1820_rom_codes[0]);                  // загрузить из еепром во flash
000453 940e 0b00 	CALL SUBOPT_0x17
                 ; 0000 00E6 	sncpy(ds1820_sn[1],ds1820_rom_codes[1]);                  // загрузить из еепром во flash
                 ; 0000 00E7 	sncpy(ds1820_sn[2],ds1820_rom_codes[2]);                  // загрузить из еепром во flash
                +
000455 ecea     +LDI R30 , LOW ( _ds1820_sn + ( 18 ) )
000456 e0f2     +LDI R31 , HIGH ( _ds1820_sn + ( 18 ) )
                 	__POINTW1MN _ds1820_sn,18
000457 93fa      	ST   -Y,R31
000458 93ea      	ST   -Y,R30
                +
000459 e1e2     +LDI R30 , LOW ( _ds1820_rom_codes + ( 18 ) )
00045a e0f0     +LDI R31 , HIGH ( _ds1820_rom_codes + ( 18 ) )
                 	__POINTW1MN _ds1820_rom_codes,18
00045b 93fa      	ST   -Y,R31
00045c 93ea      	ST   -Y,R30
00045d 940e 00bc 	CALL _sncpy
                 ; 0000 00E8 
                 ; 0000 00E9 	//Temperature[0] = GetTemper(&ds1820_sn[0][0]);             // радиатор (прочитать мусор)
                 ; 0000 00EA 	//Temperature[1] = GetTemper(&ds1820_sn[1][0]);             // котел
                 ; 0000 00EB 
                 ; 0000 00EC 	Temperature[0] = GetTemper(0);  // радиатор (прочитать мусор)
00045f e0e0      	LDI  R30,LOW(0)
000460 93ea      	ST   -Y,R30
000461 dda1      	RCALL _GetTemper
000462 93e0 02a6 	STS  _Temperature,R30
000464 93f0 02a7 	STS  _Temperature+1,R31
                 ; 0000 00ED 	Temperature[1] = GetTemper(1);  // котел
000466 e0e1      	LDI  R30,LOW(1)
000467 93ea      	ST   -Y,R30
000468 dd9a      	RCALL _GetTemper
                +
000469 93e0 02a8+STS _Temperature + ( 2 ) , R30
00046b 93f0 02a9+STS _Temperature + ( 2 ) + 1 , R31
                 	__PUTW1MN _Temperature,2
                 ; 0000 00EE   //Temperature[2] = GetTemper(2);  // внешний
                 ; 0000 00EF #endif
                 ; 0000 00F0 
                 ; 0000 00F1 	PORTD.5 = 0;    // 9 нога на исполнительное устройство (насос - по умолчанию выключен), 1 - вкл; 0 - откл
00046d 9895      	CBI  0x12,5
                 ; 0000 00F2 	StokerMode = 0; // - По умолчанию при включении всегда режим управления от датчиков !!!
00046e e1ae      	LDI  R26,LOW(_StokerMode)
00046f e0b0      	LDI  R27,HIGH(_StokerMode)
000470 e0e0      	LDI  R30,LOW(0)
000471 940e 0d83 	CALL __EEPROMWRB
                 ; 0000 00F3 
                 ; 0000 00F4 	// индикация режима управления:
                 ; 0000 00F5 	switch(StokerMode)
000473 940e 0adb 	CALL SUBOPT_0x11
000475 940e 0ae8 	CALL SUBOPT_0x13
                 ; 0000 00F6 	{
                 ; 0000 00F7 	case 0:                            // авто - обновить состояние сигнальных светодиодов
000477 f4b1      	BRNE _0x80
                 ; 0000 00F8 		if ( (Temperature[0] == -90 || Temperature[1] == -90) || (ds1820_devices < 2) ) { // ds1820_devices < 2 // ошибка датчиков
000478 940e 0aef 	CALL SUBOPT_0x15
00047a f031      	BREQ _0x82
00047b 940e 0ab2 	CALL SUBOPT_0x9
00047d 3ae6      	CPI  R30,LOW(0xFFA6)
00047e efaf      	LDI  R26,HIGH(0xFFA6)
00047f 07fa      	CPC  R31,R26
000480 f409      	BRNE _0x83
                 _0x82:
000481 c004      	RJMP _0x84
                 _0x83:
000482 91a0 02a5 	LDS  R26,_ds1820_devices
000484 30a2      	CPI  R26,LOW(0x2)
000485 f430      	BRSH _0x81
                 _0x84:
                 ; 0000 00F9 			PORTA.7 = 1;         // включить оба индикатора (до следующего цикла измерения, затем загорается зеленый)
000486 9adf      	SBI  0x1B,7
                 ; 0000 00FA 			PORTA.6 = 1;         //
000487 9ade      	SBI  0x1B,6
                 ; 0000 00FB 			Errcount = 1;        // ОШИБКА ЧТЕНИЯ ДАННЫХ
000488 e0e1      	LDI  R30,LOW(1)
000489 93e0 02d7 	STS  _Errcount,R30
                 ; 0000 00FC 		} else {
00048b c001      	RJMP _0x8A
                 _0x81:
                 ; 0000 00FD 			PORTA.7 = 1;         // горит зеленый постоянно все ОК
00048c 9adf      	SBI  0x1B,7
                 ; 0000 00FE 		}
                 _0x8A:
                 ; 0000 00FF 	break;
00048d c016      	RJMP _0x7F
                 ; 0000 0100 
                 ; 0000 0101 	case 1:                // импульс (горит желтый)
                 _0x80:
00048e 30e1      	CPI  R30,LOW(0x1)
00048f e0a0      	LDI  R26,HIGH(0x1)
000490 07fa      	CPC  R31,R26
000491 f419      	BRNE _0x8D
                 ; 0000 0102 		PORTA.7 = 0;          // отключить индикатор
000492 98df      	CBI  0x1B,7
                 ; 0000 0103 		PORTA.6 = 1;          // включить индикатор работы импульсного режима, мигание: PORTA.6 = !PORTA.6;
000493 9ade      	SBI  0x1B,6
                 ; 0000 0104 	break;
000494 c00f      	RJMP _0x7F
                 ; 0000 0105 
                 ; 0000 0106 	case 2:
                 _0x8D:
000495 30e2      	CPI  R30,LOW(0x2)
000496 e0a0      	LDI  R26,HIGH(0x2)
000497 07fa      	CPC  R31,R26
000498 f421      	BRNE _0x92
                 ; 0000 0107 		PORTD.5 = 1;                      // насос принудительно включен
000499 9a95      	SBI  0x12,5
                 ; 0000 0108 		PORTA.6 = 1; PORTA.7 = 1;         // горят оба индикатора !!
00049a 9ade      	SBI  0x1B,6
00049b 9adf      	SBI  0x1B,7
                 ; 0000 0109 	break;
00049c c007      	RJMP _0x7F
                 ; 0000 010A 
                 ; 0000 010B 	case 3:
                 _0x92:
00049d 30e3      	CPI  R30,LOW(0x3)
00049e e0a0      	LDI  R26,HIGH(0x3)
00049f 07fa      	CPC  R31,R26
0004a0 f419      	BRNE _0x7F
                 ; 0000 010C 		PORTD.5 = 0;                      // насос принудительно отключен
0004a1 9895      	CBI  0x12,5
                 ; 0000 010D 		PORTA.6 = 0; PORTA.7 = 0;         // не горит ни один индикатор !!
0004a2 98de      	CBI  0x1B,6
0004a3 98df      	CBI  0x1B,7
                 ; 0000 010E 	break;
                 ; 0000 010F 	}
                 _0x7F:
                 ; 0000 0110 
                 ; 0000 0111 	nStart++;   // счетчик перезапусков контроллера
0004a4 e2a1      	LDI  R26,LOW(_nStart)
0004a5 e0b0      	LDI  R27,HIGH(_nStart)
0004a6 940e 0d77 	CALL __EEPROMRDB
0004a8 5fef      	SUBI R30,-LOW(1)
0004a9 940e 0d83 	CALL __EEPROMWRB
0004ab 50e1      	SUBI R30,LOW(1)
                 ; 0000 0112 
                 ; 0000 0113 #ifdef SIMULATOR
                 ; 0000 0114 	putchar('O'); putchar('K'); putchar(0x0D); // тест USARTа
                 ; 0000 0115 #endif
                 ; 0000 0116 
                 ; 0000 0117 #ifdef LCD
                 ; 0000 0118 	lcd_init(16);
0004ac e1e0      	LDI  R30,LOW(16)
0004ad 93ea      	ST   -Y,R30
0004ae 940e 087b 	CALL _lcd_init
                 ; 0000 0119 	lcd_puts("Smart Stoker");
                +
0004b0 e7e5     +LDI R30 , LOW ( _0xA0 + ( 0 ) )
0004b1 e0f2     +LDI R31 , HIGH ( _0xA0 + ( 0 ) )
                 	__POINTW1MN _0xA0,0
0004b2 93fa      	ST   -Y,R31
0004b3 93ea      	ST   -Y,R30
0004b4 940e 086c 	CALL _lcd_puts
                 ; 0000 011A 	lcd_gotoxy(0, 1);
0004b6 940e 0acb 	CALL SUBOPT_0xE
                 ; 0000 011B 	lcd_puts("v:2.5 Loading...");
                +
0004b8 e8e2     +LDI R30 , LOW ( _0xA0 + ( 13 ) )
0004b9 e0f2     +LDI R31 , HIGH ( _0xA0 + ( 13 ) )
                 	__POINTW1MN _0xA0,13
0004ba 93fa      	ST   -Y,R31
0004bb 93ea      	ST   -Y,R30
0004bc 940e 086c 	CALL _lcd_puts
                 ; 0000 011C #endif
                 ; 0000 011D 
                 ; 0000 011E #ifdef RTC_DS_3231
                 ; 0000 011F     RTC_init();
                 ; 0000 0120 
                 ; 0000 0121 //настройка даты:
                 ; 0000 0122 //    RTC_write_year23(2018);
                 ; 0000 0123 //    RTC_write_month23(06);
                 ; 0000 0124 //    RTC_write_day23(13);
                 ; 0000 0125 //    RTC_write_wday23(4);
                 ; 0000 0126 //    RTC_Set(RTC_YEAR, 19);
                 ; 0000 0127 
                 ; 0000 0128 //настройка времени:
                 ; 0000 0129 //    RTC_write_hour23(21);
                 ; 0000 012A //    RTC_write_minute23(58);
                 ; 0000 012B //    RTC_write_sec23(30);
                 ; 0000 012C 
                 ; 0000 012D     lcd_gotoxy(0, 1);
                 ; 0000 012E     lcd_puts("i2c ok");
                 ; 0000 012F #endif
                 ; 0000 0130 
                 ; 0000 0131 	#asm("sei") // разрешить прерывания (чтобы таймер работал)
0004be 9478      	sei
                 ; 0000 0132 
                 ; 0000 0133 while(1)  // обработка входящих команд
                 _0xA1:
                 ; 0000 0134  {
                 ; 0000 0135   BufCRC[0] = getchar(); // получен 1 байт
0004bf dcc4      	RCALL _getchar
0004c0 93e0 02da 	STS  _BufCRC,R30
                 ; 0000 0136 
                 ; 0000 0137   switch(BufCRC[0]) // simv
0004c2 e0f0      	LDI  R31,0
                 ; 0000 0138   {
                 ; 0000 0139    case 0x01:                       // запрос температуры (отправка данных на ПК), формат: Rx: [CMD]; Tx: [T1][T2][CRC], v2.0 Tx: [T1][T2][T3][PumpState][CRC]
0004c3 30e1      	CPI  R30,LOW(0x1)
0004c4 e0a0      	LDI  R26,HIGH(0x1)
0004c5 07fa      	CPC  R31,R26
0004c6 f559      	BRNE _0xA7
                 ; 0000 013A                                     // или (если int): T1[hiT1][loT1]  T2[hiT2][loT2]
                 ; 0000 013B 	//if (CmdLost(1,10)) { continue; };   // (needReadBytes, TimeOut) пакет потерян, возвращаемся к ожиданию новой команды
                 ; 0000 013C     if(Temperature[0] == -90){tRadiator = -90;}else{tRadiator = Temperature[0];};  // int -> byte(unsigned char)
0004c7 940e 0aef 	CALL SUBOPT_0x15
0004c9 f411      	BRNE _0xA8
0004ca eae6      	LDI  R30,LOW(166)
0004cb c002      	RJMP _0xF9
                 _0xA8:
0004cc 91e0 02a6 	LDS  R30,_Temperature
                 _0xF9:
0004ce 93e0 02b5 	STS  _tRadiator,R30
                 ; 0000 013D     if(Temperature[1] == -90){tCaldron = -90;}else{tCaldron = Temperature[1];};    // int -> byte
0004d0 940e 0ab2 	CALL SUBOPT_0x9
0004d2 3ae6      	CPI  R30,LOW(0xFFA6)
0004d3 efaf      	LDI  R26,HIGH(0xFFA6)
0004d4 07fa      	CPC  R31,R26
0004d5 f411      	BRNE _0xAA
0004d6 eae6      	LDI  R30,LOW(166)
0004d7 c002      	RJMP _0xFA
                 _0xAA:
                +
0004d8 91e0 02a8+LDS R30 , _Temperature + ( 2 )
                 	__GETB1MN _Temperature,2
                 _0xFA:
0004da 93e0 02b6 	STS  _tCaldron,R30
                 ; 0000 013E     //if(Temperature[2] == -90){tOutSide = -90;}else{tOutSide = Temperature[2];};    // int -> byte
                 ; 0000 013F 
                 ; 0000 0140     BufCRC[0] = tRadiator;
0004dc 940e 0b14 	CALL SUBOPT_0x18
                 ; 0000 0141     BufCRC[1] = tCaldron;
                 ; 0000 0142 	//BufCRC[2] = tOutSide;  // внешний датчик
                 ; 0000 0143 	//BufCRC[3] = PORTD.5;   // состояние насоса PORTD.5: 1 - включен; 0 - отключен
                 ; 0000 0144 	//BufCRC[4] = crc8(BufCRC, 5);
                 ; 0000 0145     BufCRC[2] = crc8(BufCRC, 2);
0004de 940e 0b1d 	CALL SUBOPT_0x19
0004e0 e0e2      	LDI  R30,LOW(2)
0004e1 93ea      	ST   -Y,R30
0004e2 d1fa      	RCALL _crc8
                +
0004e3 93e0 02dc+STS _BufCRC + ( 2 ) , R30
                 	__PUTB1MN _BufCRC,2
                 ; 0000 0146     for(i=0; i<3; i++){putchar(BufCRC[i]);}
0004e5 e0e0      	LDI  R30,LOW(0)
0004e6 93e0 02d9 	STS  _i,R30
                 _0xAD:
0004e8 91a0 02d9 	LDS  R26,_i
0004ea 30a3      	CPI  R26,LOW(0x3)
0004eb f428      	BRSH _0xAE
0004ec 940e 0b22 	CALL SUBOPT_0x1A
0004ee 940e 0b2b 	CALL SUBOPT_0x1B
0004f0 cff7      	RJMP _0xAD
                 _0xAE:
                 ; 0000 0147 
                 ; 0000 0148    break;
0004f1 c1e9      	RJMP _0xA6
                 ; 0000 0149 
                 ; 0000 014A    case 0x02:                       // запрос настроек (отправка данных на ПК), формат: Rx: [CMD]; Tx: [MinT][MaxT][MinTCaldron][WorkTime][IdleTime][PulseMode][PumpMode][nStart][CRC]
                 _0xA7:
0004f2 30e2      	CPI  R30,LOW(0x2)
0004f3 e0a0      	LDI  R26,HIGH(0x2)
0004f4 07fa      	CPC  R31,R26
0004f5 f011      	BREQ PC+3
0004f6 940c 0537 	JMP _0xAF
                 ; 0000 014B     BufCRC[0] = MinT;				// температура включения насоса  45 (радиатор)
0004f8 e1ab      	LDI  R26,LOW(_MinT)
0004f9 e0b0      	LDI  R27,HIGH(_MinT)
0004fa 940e 0d77 	CALL __EEPROMRDB
0004fc 93e0 02da 	STS  _BufCRC,R30
                 ; 0000 014C     BufCRC[1] = MaxT;				// температура отключения насоса 55 (радиатор)
0004fe e1ac      	LDI  R26,LOW(_MaxT)
0004ff e0b0      	LDI  R27,HIGH(_MaxT)
000500 940e 0d77 	CALL __EEPROMRDB
                +
000502 93e0 02db+STS _BufCRC + ( 1 ) , R30
                 	__PUTB1MN _BufCRC,1
                 ; 0000 014D     BufCRC[2] = MinTCaldron;		// минимальная температура воды в котле при котором возможно включение насоса
000504 e1ad      	LDI  R26,LOW(_MinTCaldron)
000505 e0b0      	LDI  R27,HIGH(_MinTCaldron)
000506 940e 0d77 	CALL __EEPROMRDB
                +
000508 93e0 02dc+STS _BufCRC + ( 2 ) , R30
                 	__PUTB1MN _BufCRC,2
                 ; 0000 014E     BufCRC[3] = WorkTime;			// время работы 5-10 мин
00050a e1af      	LDI  R26,LOW(_WorkTime)
00050b e0b0      	LDI  R27,HIGH(_WorkTime)
00050c 940e 0d77 	CALL __EEPROMRDB
                +
00050e 93e0 02dd+STS _BufCRC + ( 3 ) , R30
                 	__PUTB1MN _BufCRC,3
                 ; 0000 014F     BufCRC[4] = IdleTime;			// время простоя 20-30 мин
000510 e2a0      	LDI  R26,LOW(_IdleTime)
000511 e0b0      	LDI  R27,HIGH(_IdleTime)
000512 940e 0d77 	CALL __EEPROMRDB
                +
000514 93e0 02de+STS _BufCRC + ( 4 ) , R30
                 	__PUTB1MN _BufCRC,4
                 ; 0000 0150     BufCRC[5] = StokerMode;			// режим управления
000516 940e 0adb 	CALL SUBOPT_0x11
                +
000518 93e0 02df+STS _BufCRC + ( 5 ) , R30
                 	__PUTB1MN _BufCRC,5
                 ; 0000 0151     BufCRC[6] = 0;					// Резерв - AutoRestoration - автовосстановление
00051a e0e0      	LDI  R30,LOW(0)
                +
00051b 93e0 02e0+STS _BufCRC + ( 6 ) , R30
                 	__PUTB1MN _BufCRC,6
                 ; 0000 0152     BufCRC[7] = nStart;				// счетчик перезапусков контроллера
00051d e2a1      	LDI  R26,LOW(_nStart)
00051e e0b0      	LDI  R27,HIGH(_nStart)
00051f 940e 0d77 	CALL __EEPROMRDB
                +
000521 93e0 02e1+STS _BufCRC + ( 7 ) , R30
                 	__PUTB1MN _BufCRC,7
                 ; 0000 0153     BufCRC[8] = crc8(BufCRC, 8);	// [CRC]
000523 940e 0b1d 	CALL SUBOPT_0x19
000525 e0e8      	LDI  R30,LOW(8)
000526 93ea      	ST   -Y,R30
000527 d1b5      	RCALL _crc8
                +
000528 93e0 02e2+STS _BufCRC + ( 8 ) , R30
                 	__PUTB1MN _BufCRC,8
                 ; 0000 0154     for(i=0; i<9; i++){putchar(BufCRC[i]);}
00052a e0e0      	LDI  R30,LOW(0)
00052b 93e0 02d9 	STS  _i,R30
                 _0xB1:
00052d 91a0 02d9 	LDS  R26,_i
00052f 30a9      	CPI  R26,LOW(0x9)
000530 f428      	BRSH _0xB2
000531 940e 0b22 	CALL SUBOPT_0x1A
000533 940e 0b2b 	CALL SUBOPT_0x1B
000535 cff7      	RJMP _0xB1
                 _0xB2:
                 ; 0000 0155 
                 ; 0000 0156    break;
000536 c1a4      	RJMP _0xA6
                 ; 0000 0157 
                 ; 0000 0158    case 0x03:                       // установка настроек (прием данных от ПК), формат: Rx: [CMD] [MinT][MaxT][MinTCaldron][WorkTime][IdleTime][StokerMode][CRC], подтверждение выполнения - 0xAA
                 _0xAF:
000537 30e3      	CPI  R30,LOW(0x3)
000538 e0a0      	LDI  R26,HIGH(0x3)
000539 07fa      	CPC  R31,R26
00053a f011      	BREQ PC+3
00053b 940c 05ae 	JMP _0xB3
                 ; 0000 0159 	if (CmdLost(7, 14)) { continue; }; // 8-1											Tx: [0xAA]
00053d e0e7      	LDI  R30,LOW(7)
00053e 93ea      	ST   -Y,R30
00053f e0ee      	LDI  R30,LOW(14)
000540 93ea      	ST   -Y,R30
000541 dcb2      	RCALL _CmdLost
000542 30e0      	CPI  R30,0
000543 f009      	BREQ _0xB4
000544 cf7a      	RJMP _0xA1
                 _0xB4:
                 ; 0000 015A 
                 ; 0000 015B     for(i=1; i<7; i++) // 6+crc, BufCRC[0] == 0x03;
000545 e0e1      	LDI  R30,LOW(1)
000546 93e0 02d9 	STS  _i,R30
                 _0xB6:
000548 91a0 02d9 	LDS  R26,_i
00054a 30a7      	CPI  R26,LOW(0x7)
00054b f468      	BRSH _0xB7
                 ; 0000 015C     {
                 ; 0000 015D      BufCRC[i] = getchar();
00054c 940e 0b31 	CALL SUBOPT_0x1C
00054e 52e6      	SUBI R30,LOW(-_BufCRC)
00054f 4ffd      	SBCI R31,HIGH(-_BufCRC)
000550 93ff      	PUSH R31
000551 93ef      	PUSH R30
000552 dc31      	RCALL _getchar
000553 91af      	POP  R26
000554 91bf      	POP  R27
000555 93ec      	ST   X,R30
                 ; 0000 015E     }
000556 940e 0b2b 	CALL SUBOPT_0x1B
000558 cfef      	RJMP _0xB6
                 _0xB7:
                 ; 0000 015F 
                 ; 0000 0160     BufCRC[7] = getchar(); // CRC
000559 dc2a      	RCALL _getchar
                +
00055a 93e0 02e1+STS _BufCRC + ( 7 ) , R30
                 	__PUTB1MN _BufCRC,7
                 ; 0000 0161 
                 ; 0000 0162     if(crc8(BufCRC, 7) == BufCRC[7])    // CRC верна в Stoker'e - crc8(Command->SendPacket,7-1); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
00055c 940e 0b1d 	CALL SUBOPT_0x19
00055e e0e7      	LDI  R30,LOW(7)
00055f 93ea      	ST   -Y,R30
000560 d17c      	RCALL _crc8
000561 2fae      	MOV  R26,R30
                +
000562 91e0 02e1+LDS R30 , _BufCRC + ( 7 )
                 	__GETB1MN _BufCRC,7
000564 17ea      	CP   R30,R26
000565 f011      	BREQ PC+3
000566 940c 05ad 	JMP _0xB8
                 ; 0000 0163     {
                 ; 0000 0164      //BufCRC[0] - 0x03 номер команды
                 ; 0000 0165      MinT = BufCRC[1];                  // температура включения насоса  45 (радиатор)
                +
000568 91e0 02db+LDS R30 , _BufCRC + ( 1 )
                 	__GETB1MN _BufCRC,1
00056a e1ab      	LDI  R26,LOW(_MinT)
00056b e0b0      	LDI  R27,HIGH(_MinT)
00056c 940e 0d83 	CALL __EEPROMWRB
                 ; 0000 0166      MaxT = BufCRC[2];                  // температура отключения насоса 55 (радиатор)
                +
00056e 91e0 02dc+LDS R30 , _BufCRC + ( 2 )
                 	__GETB1MN _BufCRC,2
000570 e1ac      	LDI  R26,LOW(_MaxT)
000571 e0b0      	LDI  R27,HIGH(_MaxT)
000572 940e 0d83 	CALL __EEPROMWRB
                 ; 0000 0167      MinTCaldron = BufCRC[3];           // минимальная температура воды в котле при котором возможно включение насоса
                +
000574 91e0 02dd+LDS R30 , _BufCRC + ( 3 )
                 	__GETB1MN _BufCRC,3
000576 e1ad      	LDI  R26,LOW(_MinTCaldron)
000577 e0b0      	LDI  R27,HIGH(_MinTCaldron)
000578 940e 0d83 	CALL __EEPROMWRB
                 ; 0000 0168      WorkTime = BufCRC[4];              // время работы 5-10 мин
                +
00057a 91e0 02de+LDS R30 , _BufCRC + ( 4 )
                 	__GETB1MN _BufCRC,4
00057c e1af      	LDI  R26,LOW(_WorkTime)
00057d e0b0      	LDI  R27,HIGH(_WorkTime)
00057e 940e 0d83 	CALL __EEPROMWRB
                 ; 0000 0169      IdleTime = BufCRC[5];              // время простоя 20-30 мин
                +
000580 91e0 02df+LDS R30 , _BufCRC + ( 5 )
                 	__GETB1MN _BufCRC,5
000582 e2a0      	LDI  R26,LOW(_IdleTime)
000583 e0b0      	LDI  R27,HIGH(_IdleTime)
000584 940e 0d83 	CALL __EEPROMWRB
                 ; 0000 016A      StokerMode = BufCRC[6];            // режим работы (от DS или импульсный)
                +
000586 91e0 02e0+LDS R30 , _BufCRC + ( 6 )
                 	__GETB1MN _BufCRC,6
000588 e1ae      	LDI  R26,LOW(_StokerMode)
000589 e0b0      	LDI  R27,HIGH(_StokerMode)
00058a 940e 0ae0 	CALL SUBOPT_0x12
                 ; 0000 016B 
                 ; 0000 016C      TickCount = 0;                     // обнуление времени работы  ???...
                 ; 0000 016D      //AutoRestoration = BufCRC[];    // автовосстановление
                 ; 0000 016E 
                 ; 0000 016F      switch(StokerMode)
00058c 940e 0adb 	CALL SUBOPT_0x11
00058e 940e 0ae8 	CALL SUBOPT_0x13
                 ; 0000 0170      {
                 ; 0000 0171       case 0:                            // авто - обновить состояние сигнальных светодиодов
000590 f419      	BRNE _0xBC
                 ; 0000 0172        PORTA.7 = 1;                      // включить индикатор, работа от DS1820
000591 9adf      	SBI  0x1B,7
                 ; 0000 0173        PORTA.6 = 0;                      // отключить индикатор
000592 98de      	CBI  0x1B,6
                 ; 0000 0174       break;
000593 c016      	RJMP _0xBB
                 ; 0000 0175 
                 ; 0000 0176       case 1:                            // импульс
                 _0xBC:
000594 30e1      	CPI  R30,LOW(0x1)
000595 e0a0      	LDI  R26,HIGH(0x1)
000596 07fa      	CPC  R31,R26
000597 f419      	BRNE _0xC1
                 ; 0000 0177        PORTA.7 = 0;                      // отключить индикатор
000598 98df      	CBI  0x1B,7
                 ; 0000 0178        PORTA.6 = 1;                      // включить индикатор работы импульсного режима
000599 9ade      	SBI  0x1B,6
                 ; 0000 0179       break;
00059a c00f      	RJMP _0xBB
                 ; 0000 017A 
                 ; 0000 017B       case 2:
                 _0xC1:
00059b 30e2      	CPI  R30,LOW(0x2)
00059c e0a0      	LDI  R26,HIGH(0x2)
00059d 07fa      	CPC  R31,R26
00059e f421      	BRNE _0xC6
                 ; 0000 017C        PORTD.5 = 1;                      // принудительное включение насоса
00059f 9a95      	SBI  0x12,5
                 ; 0000 017D        PORTA.6 = 1; PORTA.7 = 1;         // горят оба индикатора !!
0005a0 9ade      	SBI  0x1B,6
0005a1 9adf      	SBI  0x1B,7
                 ; 0000 017E       break;
0005a2 c007      	RJMP _0xBB
                 ; 0000 017F 
                 ; 0000 0180       case 3:
                 _0xC6:
0005a3 30e3      	CPI  R30,LOW(0x3)
0005a4 e0a0      	LDI  R26,HIGH(0x3)
0005a5 07fa      	CPC  R31,R26
0005a6 f419      	BRNE _0xBB
                 ; 0000 0181        PORTD.5 = 0;                      // принудительное отключение насоса
0005a7 9895      	CBI  0x12,5
                 ; 0000 0182        PORTA.6 = 0; PORTA.7 = 0;         // не горит ни один индикатор !!
0005a8 98de      	CBI  0x1B,6
0005a9 98df      	CBI  0x1B,7
                 ; 0000 0183       break;
                 ; 0000 0184      }
                 _0xBB:
                 ; 0000 0185 
                 ; 0000 0186      putchar(0xAA);                      // OK команда выполнена
0005aa eaea      	LDI  R30,LOW(170)
0005ab 93ea      	ST   -Y,R30
0005ac dc17      	RCALL _putchar
                 ; 0000 0187     }
                 ; 0000 0188 
                 ; 0000 0189    break;
                 _0xB8:
0005ad c12d      	RJMP _0xA6
                 ; 0000 018A 
                 ; 0000 018B    case 0x04:                       // запрос серийных номеров датчиков DS1820 "SN ds1 и ds2" (отправка данных на ПК), формат: Tx: [ds1_0][ds2_0][ds1_1][ds2_1][ds1_2]... [CRC]
                 _0xB3:
0005ae 30e4      	CPI  R30,LOW(0x4)
0005af e0a0      	LDI  R26,HIGH(0x4)
0005b0 07fa      	CPC  R31,R26
0005b1 f5c9      	BRNE _0xD4
                 ; 0000 018C 										 //											    									   Rx: [CMD]
                 ; 0000 018D     for(i = 0; i < 8; i++)
0005b2 e0e0      	LDI  R30,LOW(0)
0005b3 93e0 02d9 	STS  _i,R30
                 _0xD6:
0005b5 91a0 02d9 	LDS  R26,_i
0005b7 30a8      	CPI  R26,LOW(0x8)
0005b8 f4f0      	BRSH _0xD7
                 ; 0000 018E     {
                 ; 0000 018F       BufCRC[i+i] = ds1820_sn[0][i];   // [0] - радиатор
0005b9 940e 0b35 	CALL SUBOPT_0x1D
0005bb 0fea      	ADD  R30,R26
0005bc 1ffb      	ADC  R31,R27
0005bd 52e6      	SUBI R30,LOW(-_BufCRC)
0005be 4ffd      	SBCI R31,HIGH(-_BufCRC)
0005bf 01df      	MOVW R26,R30
0005c0 940e 0b31 	CALL SUBOPT_0x1C
0005c2 54e8      	SUBI R30,LOW(-_ds1820_sn)
0005c3 4ffd      	SBCI R31,HIGH(-_ds1820_sn)
0005c4 81e0      	LD   R30,Z
0005c5 93ec      	ST   X,R30
                 ; 0000 0190       BufCRC[i+i+1] = ds1820_sn[1][i]; // [1] - котел
0005c6 940e 0b35 	CALL SUBOPT_0x1D
0005c8 940e 0b39 	CALL SUBOPT_0x1E
0005ca 010f      	MOVW R0,R30
                +
0005cb eca1     +LDI R26 , LOW ( _ds1820_sn + ( 9 ) )
0005cc e0b2     +LDI R27 , HIGH ( _ds1820_sn + ( 9 ) )
                 	__POINTW2MN _ds1820_sn,9
0005cd 940e 0b31 	CALL SUBOPT_0x1C
0005cf 0fae      	ADD  R26,R30
0005d0 1fbf      	ADC  R27,R31
0005d1 91ec      	LD   R30,X
0005d2 01d0      	MOVW R26,R0
0005d3 93ec      	ST   X,R30
                 ; 0000 0191     }
0005d4 940e 0b2b 	CALL SUBOPT_0x1B
0005d6 cfde      	RJMP _0xD6
                 _0xD7:
                 ; 0000 0192 
                 ; 0000 0193     BufCRC[16] = crc8(BufCRC, 16);
0005d7 940e 0b1d 	CALL SUBOPT_0x19
0005d9 e1e0      	LDI  R30,LOW(16)
0005da 93ea      	ST   -Y,R30
0005db d101      	RCALL _crc8
                +
0005dc 93e0 02ea+STS _BufCRC + ( 16 ) , R30
                 	__PUTB1MN _BufCRC,16
                 ; 0000 0194     for(i=0; i<17; i++){putchar(BufCRC[i]);}
0005de e0e0      	LDI  R30,LOW(0)
0005df 93e0 02d9 	STS  _i,R30
                 _0xD9:
0005e1 91a0 02d9 	LDS  R26,_i
0005e3 31a1      	CPI  R26,LOW(0x11)
0005e4 f428      	BRSH _0xDA
0005e5 940e 0b22 	CALL SUBOPT_0x1A
0005e7 940e 0b2b 	CALL SUBOPT_0x1B
0005e9 cff7      	RJMP _0xD9
                 _0xDA:
                 ; 0000 0195 
                 ; 0000 0196    break;
0005ea c0f0      	RJMP _0xA6
                 ; 0000 0197 
                 ; 0000 0198    case 0x05:                       // установка серийных номеров датчиков DS1820 "SN ds1 и ds2" (прием данных от ПК), формат: Rx: [CMD] [ds1_0][ds2_0][ds1_1][ds2_1][ds1_2]... [CRC8]
                 _0xD4:
0005eb 30e5      	CPI  R30,LOW(0x5)
0005ec e0a0      	LDI  R26,HIGH(0x5)
0005ed 07fa      	CPC  R31,R26
0005ee f011      	BREQ PC+3
0005ef 940c 0658 	JMP _0xDB
                 ; 0000 0199 	if (CmdLost(17, 34)) { continue; }; //											    									   Tx: [0xAA]
0005f1 e1e1      	LDI  R30,LOW(17)
0005f2 93ea      	ST   -Y,R30
0005f3 e2e2      	LDI  R30,LOW(34)
0005f4 93ea      	ST   -Y,R30
0005f5 dbfe      	RCALL _CmdLost
0005f6 30e0      	CPI  R30,0
0005f7 f009      	BREQ _0xDC
0005f8 cec6      	RJMP _0xA1
                 _0xDC:
                 ; 0000 019A 
                 ; 0000 019B     //BufCRC[0] = 0x05
                 ; 0000 019C 
                 ; 0000 019D     for(i = 0; i < 8; i++)
0005f9 e0e0      	LDI  R30,LOW(0)
0005fa 93e0 02d9 	STS  _i,R30
                 _0xDE:
0005fc 91a0 02d9 	LDS  R26,_i
0005fe 30a8      	CPI  R26,LOW(0x8)
0005ff f4d8      	BRSH _0xDF
                 ; 0000 019E     {
                 ; 0000 019F      BufCRC[i+i+1] = getchar();   // [0] - радиатор,  ds1820_rom_codes[0][i]
000600 940e 0b35 	CALL SUBOPT_0x1D
000602 940e 0b39 	CALL SUBOPT_0x1E
000604 93ff      	PUSH R31
000605 93ef      	PUSH R30
000606 940e 0184 	CALL _getchar
000608 91af      	POP  R26
000609 91bf      	POP  R27
00060a 93ec      	ST   X,R30
                 ; 0000 01A0      BufCRC[i+i+1+1] = getchar(); // [1] - котел,     ds1820_rom_codes[1][i]
00060b 940e 0b35 	CALL SUBOPT_0x1D
00060d 0fea      	ADD  R30,R26
00060e 1ffb      	ADC  R31,R27
                +
00060f 52e4     +SUBI R30 , LOW ( - _BufCRC - ( 2 ) )
000610 4ffd     +SBCI R31 , HIGH ( - _BufCRC - ( 2 ) )
                 	__ADDW1MN _BufCRC,2
000611 93ff      	PUSH R31
000612 93ef      	PUSH R30
000613 940e 0184 	CALL _getchar
000615 91af      	POP  R26
000616 91bf      	POP  R27
000617 93ec      	ST   X,R30
                 ; 0000 01A1     }
000618 940e 0b2b 	CALL SUBOPT_0x1B
00061a cfe1      	RJMP _0xDE
                 _0xDF:
                 ; 0000 01A2 
                 ; 0000 01A3     BufCRC[17] = getchar(); // CRC !!!
00061b 940e 0184 	CALL _getchar
                +
00061d 93e0 02eb+STS _BufCRC + ( 17 ) , R30
                 	__PUTB1MN _BufCRC,17
                 ; 0000 01A4 
                 ; 0000 01A5     if(crc8(BufCRC, 17) == BufCRC[17])    // 0x05 + 16 s/s = 17, проверка CRC
00061f 940e 0b1d 	CALL SUBOPT_0x19
000621 e1e1      	LDI  R30,LOW(17)
000622 93ea      	ST   -Y,R30
000623 d0b9      	RCALL _crc8
000624 2fae      	MOV  R26,R30
                +
000625 91e0 02eb+LDS R30 , _BufCRC + ( 17 )
                 	__GETB1MN _BufCRC,17
000627 17ea      	CP   R30,R26
000628 f571      	BRNE _0xE0
                 ; 0000 01A6     {
                 ; 0000 01A7 
                 ; 0000 01A8     for(i = 0; i < 8; i++)
000629 e0e0      	LDI  R30,LOW(0)
00062a 93e0 02d9 	STS  _i,R30
                 _0xE2:
00062c 91a0 02d9 	LDS  R26,_i
00062e 30a8      	CPI  R26,LOW(0x8)
00062f f510      	BRSH _0xE3
                 ; 0000 01A9     {
                 ; 0000 01AA      ds1820_sn[0][i] = BufCRC[i+i+1];   // [0] - радиатор,  ds1820_rom_codes[0][i]
000630 940e 0b31 	CALL SUBOPT_0x1C
000632 01bf      	MOVW R22,R30
000633 54e8      	SUBI R30,LOW(-_ds1820_sn)
000634 4ffd      	SBCI R31,HIGH(-_ds1820_sn)
000635 010f      	MOVW R0,R30
000636 91a0 02d9 	LDS  R26,_i
000638 27bb      	CLR  R27
000639 01fb      	MOVW R30,R22
00063a 940e 0b39 	CALL SUBOPT_0x1E
00063c 81e0      	LD   R30,Z
00063d 01d0      	MOVW R26,R0
00063e 93ec      	ST   X,R30
                 ; 0000 01AB      ds1820_sn[1][i] = BufCRC[i+i+1+1]; // [1] - котел,     ds1820_rom_codes[1][i]
                +
00063f eca1     +LDI R26 , LOW ( _ds1820_sn + ( 9 ) )
000640 e0b2     +LDI R27 , HIGH ( _ds1820_sn + ( 9 ) )
                 	__POINTW2MN _ds1820_sn,9
000641 940e 0b31 	CALL SUBOPT_0x1C
000643 0fea      	ADD  R30,R26
000644 1ffb      	ADC  R31,R27
000645 010f      	MOVW R0,R30
000646 940e 0b35 	CALL SUBOPT_0x1D
000648 0fea      	ADD  R30,R26
000649 1ffb      	ADC  R31,R27
                +
00064a 52e4     +SUBI R30 , LOW ( - _BufCRC - ( 2 ) )
00064b 4ffd     +SBCI R31 , HIGH ( - _BufCRC - ( 2 ) )
                 	__ADDW1MN _BufCRC,2
00064c 81e0      	LD   R30,Z
00064d 01d0      	MOVW R26,R0
00064e 93ec      	ST   X,R30
                 ; 0000 01AC     }
00064f 940e 0b2b 	CALL SUBOPT_0x1B
000651 cfda      	RJMP _0xE2
                 _0xE3:
                 ; 0000 01AD 
                 ; 0000 01AE      sncpy(ds1820_sn[0],ds1820_rom_codes[0]); // пересохранить из flash в еепром
000652 940e 0b00 	CALL SUBOPT_0x17
                 ; 0000 01AF      sncpy(ds1820_sn[1],ds1820_rom_codes[1]); // пересохранить из flash в еепром
                 ; 0000 01B0      putchar(0xAA);                           // OK команда выполнена
000654 eaea      	LDI  R30,LOW(170)
000655 93ea      	ST   -Y,R30
000656 db6d      	RCALL _putchar
                 ; 0000 01B1     }
                 ; 0000 01B2 
                 ; 0000 01B3    break;
                 _0xE0:
000657 c083      	RJMP _0xA6
                 ; 0000 01B4 
                 ; 0000 01B5    case 0x06:                       // сброс счетчика перезапусков контроллера (прием данных от ПК), формат: Rx: [0x06], Tx: [0xAA]
                 _0xDB:
000658 30e6      	CPI  R30,LOW(0x6)
000659 e0a0      	LDI  R26,HIGH(0x6)
00065a 07fa      	CPC  R31,R26
00065b f439      	BRNE _0xE4
                 ; 0000 01B6     nStart = 0;
00065c e2a1      	LDI  R26,LOW(_nStart)
00065d e0b0      	LDI  R27,HIGH(_nStart)
00065e e0e0      	LDI  R30,LOW(0)
00065f 940e 0d83 	CALL __EEPROMWRB
                 ; 0000 01B7     putchar(0xAA);                  // OK команда выполнена
000661 eaea      	LDI  R30,LOW(170)
000662 c075      	RJMP _0xFB
                 ; 0000 01B8    break;
                 ; 0000 01B9 
                 ; 0000 01BA    case 0x07:                     // GetState
                 _0xE4:
000663 30e7      	CPI  R30,LOW(0x7)
000664 e0a0      	LDI  R26,HIGH(0x7)
000665 07fa      	CPC  R31,R26
000666 f011      	BREQ PC+3
000667 940c 06a9 	JMP _0xE5
                 ; 0000 01BB                                   // запрос температуры (отправка данных на ПК), формат: Rx: [CMD]; Tx: [T1][T2][T3][PumpState][CRC]
                 ; 0000 01BC                                   // или (если int): T1[hiT1][loT1]  T2[hiT2][loT2]
                 ; 0000 01BD     if(Temperature[0] == -90){tRadiator = -90;}else{tRadiator = Temperature[0];};  // int -> byte(unsigned char)
000669 940e 0aef 	CALL SUBOPT_0x15
00066b f411      	BRNE _0xE6
00066c eae6      	LDI  R30,LOW(166)
00066d c002      	RJMP _0xFC
                 _0xE6:
00066e 91e0 02a6 	LDS  R30,_Temperature
                 _0xFC:
000670 93e0 02b5 	STS  _tRadiator,R30
                 ; 0000 01BE     if(Temperature[1] == -90){tCaldron = -90;}else{tCaldron = Temperature[1];};    // int -> byte
000672 940e 0ab2 	CALL SUBOPT_0x9
000674 3ae6      	CPI  R30,LOW(0xFFA6)
000675 efaf      	LDI  R26,HIGH(0xFFA6)
000676 07fa      	CPC  R31,R26
000677 f411      	BRNE _0xE8
000678 eae6      	LDI  R30,LOW(166)
000679 c002      	RJMP _0xFD
                 _0xE8:
                +
00067a 91e0 02a8+LDS R30 , _Temperature + ( 2 )
                 	__GETB1MN _Temperature,2
                 _0xFD:
00067c 93e0 02b6 	STS  _tCaldron,R30
                 ; 0000 01BF     if(Temperature[2] == -90){tOutSide = -90;}else{tOutSide = Temperature[2];};    // int -> byte
00067e 940e 0ad1 	CALL SUBOPT_0xF
000680 3ae6      	CPI  R30,LOW(0xFFA6)
000681 efaf      	LDI  R26,HIGH(0xFFA6)
000682 07fa      	CPC  R31,R26
000683 f411      	BRNE _0xEA
000684 eae6      	LDI  R30,LOW(166)
000685 c002      	RJMP _0xFE
                 _0xEA:
                +
000686 91e0 02aa+LDS R30 , _Temperature + ( 4 )
                 	__GETB1MN _Temperature,4
                 _0xFE:
000688 93e0 02b7 	STS  _tOutSide,R30
                 ; 0000 01C0 
                 ; 0000 01C1     BufCRC[0] = tRadiator;
00068a 940e 0b14 	CALL SUBOPT_0x18
                 ; 0000 01C2     BufCRC[1] = tCaldron;
                 ; 0000 01C3 	BufCRC[2] = tOutSide;  // внешний датчик
00068c 91e0 02b7 	LDS  R30,_tOutSide
                +
00068e 93e0 02dc+STS _BufCRC + ( 2 ) , R30
                 	__PUTB1MN _BufCRC,2
                 ; 0000 01C4 	BufCRC[3] = PORTD.5;   // состояние насоса PORTD.5: 1 - включен; 0 - отключен
000690 e0e0      	LDI  R30,0
000691 9995      	SBIC 0x12,5
000692 e0e1      	LDI  R30,1
                +
000693 93e0 02dd+STS _BufCRC + ( 3 ) , R30
                 	__PUTB1MN _BufCRC,3
                 ; 0000 01C5 	BufCRC[4] = crc8(BufCRC, 4);
000695 940e 0b1d 	CALL SUBOPT_0x19
000697 e0e4      	LDI  R30,LOW(4)
000698 93ea      	ST   -Y,R30
000699 d043      	RCALL _crc8
                +
00069a 93e0 02de+STS _BufCRC + ( 4 ) , R30
                 	__PUTB1MN _BufCRC,4
                 ; 0000 01C6     for(i=0; i<5; i++){putchar(BufCRC[i]);}
00069c e0e0      	LDI  R30,LOW(0)
00069d 93e0 02d9 	STS  _i,R30
                 _0xED:
00069f 91a0 02d9 	LDS  R26,_i
0006a1 30a5      	CPI  R26,LOW(0x5)
0006a2 f428      	BRSH _0xEE
0006a3 940e 0b22 	CALL SUBOPT_0x1A
0006a5 940e 0b2b 	CALL SUBOPT_0x1B
0006a7 cff7      	RJMP _0xED
                 _0xEE:
                 ; 0000 01C7 
                 ; 0000 01C8    break;
0006a8 c032      	RJMP _0xA6
                 ; 0000 01C9 
                 ; 0000 01CA    //case 0x08:                     // резерв
                 ; 0000 01CB    //break;
                 ; 0000 01CC 
                 ; 0000 01CD    case 0x09:						// проверка связи
                 _0xE5:
0006a9 30e9      	CPI  R30,LOW(0x9)
0006aa e0a0      	LDI  R26,HIGH(0x9)
0006ab 07fa      	CPC  R31,R26
0006ac f571      	BRNE _0xA6
                 ; 0000 01CE    putchar('=');
0006ad e3ed      	LDI  R30,LOW(61)
0006ae 93ea      	ST   -Y,R30
0006af 940e 01c4 	CALL _putchar
                 ; 0000 01CF    putchar('S');
0006b1 e5e3      	LDI  R30,LOW(83)
0006b2 93ea      	ST   -Y,R30
0006b3 940e 01c4 	CALL _putchar
                 ; 0000 01D0    putchar('M');
0006b5 e4ed      	LDI  R30,LOW(77)
0006b6 93ea      	ST   -Y,R30
0006b7 940e 01c4 	CALL _putchar
                 ; 0000 01D1    putchar('A');
0006b9 e4e1      	LDI  R30,LOW(65)
0006ba 93ea      	ST   -Y,R30
0006bb 940e 01c4 	CALL _putchar
                 ; 0000 01D2    putchar('R');
0006bd e5e2      	LDI  R30,LOW(82)
0006be 93ea      	ST   -Y,R30
0006bf 940e 01c4 	CALL _putchar
                 ; 0000 01D3    putchar('T');
0006c1 e5e4      	LDI  R30,LOW(84)
0006c2 93ea      	ST   -Y,R30
0006c3 940e 01c4 	CALL _putchar
                 ; 0000 01D4    putchar('=');
0006c5 e3ed      	LDI  R30,LOW(61)
0006c6 93ea      	ST   -Y,R30
0006c7 940e 01c4 	CALL _putchar
                 ; 0000 01D5    putchar('D');
0006c9 e4e4      	LDI  R30,LOW(68)
0006ca 940e 0b3e 	CALL SUBOPT_0x1F
                 ; 0000 01D6    putchar('E');
                 ; 0000 01D7    putchar('V');
0006cc e5e6      	LDI  R30,LOW(86)
0006cd 93ea      	ST   -Y,R30
0006ce 940e 01c4 	CALL _putchar
                 ; 0000 01D8    putchar('I');
0006d0 e4e9      	LDI  R30,LOW(73)
0006d1 93ea      	ST   -Y,R30
0006d2 940e 01c4 	CALL _putchar
                 ; 0000 01D9    putchar('C');
0006d4 e4e3      	LDI  R30,LOW(67)
0006d5 940e 0b3e 	CALL SUBOPT_0x1F
                 ; 0000 01DA    putchar('E');
                 ; 0000 01DB    putchar('=');
0006d7 e3ed      	LDI  R30,LOW(61)
                 _0xFB:
0006d8 93ea      	ST   -Y,R30
0006d9 940e 01c4 	CALL _putchar
                 ; 0000 01DC    // =SMART-DEVICE=                // тест связи
                 ; 0000 01DD    break;
                 ; 0000 01DE 
                 ; 0000 01DF   #ifdef SAVETEMPER
                 ; 0000 01E0    case 0x0A:
                 ; 0000 01E1     SendTemper(0);  // получение температуры (отправка данных на ПК) без-CRC ds1
                 ; 0000 01E2    break;
                 ; 0000 01E3   #endif
                 ; 0000 01E4 
                 ; 0000 01E5    //case 0xFF:                // ......  расширенные команды
                 ; 0000 01E6    // simv = getchar();
                 ; 0000 01E7    // switch(simv){case 0x01: /*команда*/ break; ...}
                 ; 0000 01E8    //break;
                 ; 0000 01E9 
                 ; 0000 01EA    //------------------------------------------------------------------------------------------------
                 ; 0000 01EB   };
                 _0xA6:
                 ; 0000 01EC 
                 ; 0000 01ED   //putchar(0x0D); // CR конец приема/передачи
                 ; 0000 01EE  } // \while(1)
0006db cde3      	RJMP _0xA1
                 ; 0000 01EF 
                 ; 0000 01F0 }
                 _0xF0:
0006dc cfff      	RJMP _0xF0
                 
                 	.DSEG
                 _0xA0:
000275           	.BYTE 0x1E
                 ;/* please read copyright-notice at EOF */
                 ;
                 ;//#include <inttypes.h>
                 ;typedef unsigned char uint8_t;  // 8
                 ;typedef unsigned char uint16_t; // 16 !!!!!!
                 ;
                 ;#define CRC8INIT	0x00
                 ;#define CRC8POLY	0x18              //0X18 = X^8+X^5+X^4+X^0
                 ;
                 ;
                 ;
                 ; uint8_t crc8 ( uint8_t *data_in, uint16_t number_of_bytes_to_read )
                 ; 0001 000D  {
                 
                 	.CSEG
                 _crc8:
                 ; 0001 000E    uint8_t	 crc;
                 ; 0001 000F    uint16_t loop_count;
                 ; 0001 0010    uint8_t  bit_counter;
                 ; 0001 0011    uint8_t  data;
                 ; 0001 0012    uint8_t  feedback_bit;
                 ; 0001 0013 
                 ; 0001 0014    crc = CRC8INIT;
0006dd 940e 0d95 	CALL __SAVELOCR5
                 ;	*data_in -> Y+6
                 ;	number_of_bytes_to_read -> Y+5
                 ;	crc -> R16
                 ;	loop_count -> R17
                 ;	bit_counter -> R18
                 ;	data -> R19
                 ;	feedback_bit -> R20
0006df e000      	LDI  R16,LOW(0)
                 ; 0001 0015 
                 ; 0001 0016    for (loop_count = 0; loop_count != number_of_bytes_to_read; loop_count++)
0006e0 e010      	LDI  R17,LOW(0)
                 _0x20004:
0006e1 81ed      	LDD  R30,Y+5
0006e2 17e1      	CP   R30,R17
0006e3 f119      	BREQ _0x20005
                 ; 0001 0017     { data = data_in[loop_count];
0006e4 81ae      	LDD  R26,Y+6
0006e5 81bf      	LDD  R27,Y+6+1
0006e6 27ee      	CLR  R30
0006e7 0fa1      	ADD  R26,R17
0006e8 1fbe      	ADC  R27,R30
0006e9 913c      	LD   R19,X
                 ; 0001 0018 
                 ; 0001 0019       bit_counter = 8;
0006ea e028      	LDI  R18,LOW(8)
                 ; 0001 001A       do
                 _0x20007:
                 ; 0001 001B        { feedback_bit = (crc ^ data) & 0x01;
0006eb 2fe3      	MOV  R30,R19
0006ec 27e0      	EOR  R30,R16
0006ed 70e1      	ANDI R30,LOW(0x1)
0006ee 2f4e      	MOV  R20,R30
                 ; 0001 001C          if ( feedback_bit == 0x01 )
0006ef 3041      	CPI  R20,1
0006f0 f411      	BRNE _0x20009
                 ; 0001 001D             crc = crc ^ CRC8POLY;
0006f1 e1e8      	LDI  R30,LOW(24)
0006f2 270e      	EOR  R16,R30
                 ; 0001 001E 
                 ; 0001 001F          crc = (crc >> 1) & 0x7F;
                 _0x20009:
0006f3 2fe0      	MOV  R30,R16
0006f4 e0f0      	LDI  R31,0
0006f5 95f5      	ASR  R31
0006f6 95e7      	ROR  R30
0006f7 77ef      	ANDI R30,LOW(0x7F)
0006f8 70f0      	ANDI R31,HIGH(0x7F)
0006f9 2f0e      	MOV  R16,R30
                 ; 0001 0020          if ( feedback_bit == 0x01 )
0006fa 3041      	CPI  R20,1
0006fb f409      	BRNE _0x2000A
                 ; 0001 0021             crc = crc | 0x80;
0006fc 6800      	ORI  R16,LOW(128)
                 ; 0001 0022 
                 ; 0001 0023          data = data >> 1;
                 _0x2000A:
0006fd 2fe3      	MOV  R30,R19
0006fe e0f0      	LDI  R31,0
0006ff 95f5      	ASR  R31
000700 95e7      	ROR  R30
000701 2f3e      	MOV  R19,R30
                 ; 0001 0024          bit_counter--;
000702 5021      	SUBI R18,1
                 ; 0001 0025        }
                 ; 0001 0026       while (bit_counter > 0);
000703 3021      	CPI  R18,1
000704 f730      	BRSH _0x20007
                 ; 0001 0027     }
000705 5f1f      	SUBI R17,-1
000706 cfda      	RJMP _0x20004
                 _0x20005:
                 ; 0001 0028    return crc;
000707 2fe0      	MOV  R30,R16
000708 940e 0d9c 	CALL __LOADLOCR5
00070a 9628      	ADIW R28,8
00070b 9508      	RET
                 ; 0001 0029  }
                 ;
                 ;
                 ;
                 ;/*
                 ;This code is from Colin O'Flynn - Copyright (c) 2002
                 ;only minor changes by M.Thomas 9/2004
                 ;
                 ;Permission is hereby granted, free of charge, to any person obtaining a copy of
                 ;this software and associated documentation files (the "Software"), to deal in
                 ;the Software without restriction, including without limitation the rights to
                 ;use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
                 ;the Software, and to permit persons to whom the Software is furnished to do so,
                 ;subject to the following conditions:
                 ;
                 ;The above copyright notice and this permission notice shall be included in all
                 ;copies or substantial portions of the Software.
                 ;
                 ;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                 ;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
                 ;FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
                 ;COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
                 ;IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
                 ;CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                 ;*/
                 
                 	.CSEG
                 _ds1820_select:
00070c 930a      	ST   -Y,R16
00070d 940e 0bb9 	CALL _w1_init
00070f 30e0      	CPI  R30,0
000710 f411      	BRNE _0x2000003
000711 e0e0      	LDI  R30,LOW(0)
000712 c165      	RJMP _0x2120004
                 _0x2000003:
000713 81e9      	LDD  R30,Y+1
000714 81fa      	LDD  R31,Y+1+1
000715 9730      	SBIW R30,0
000716 f049      	BREQ _0x2000004
000717 e5e5      	LDI  R30,LOW(85)
000718 940e 0b45 	CALL SUBOPT_0x20
                 _0x2000006:
00071a 940e 0b4a 	CALL SUBOPT_0x21
00071c 5f0f      	SUBI R16,-LOW(1)
00071d 3008      	CPI  R16,8
00071e f3d8      	BRLO _0x2000006
00071f c004      	RJMP _0x2000008
                 _0x2000004:
000720 ecec      	LDI  R30,LOW(204)
000721 93ea      	ST   -Y,R30
000722 940e 0bff 	CALL _w1_write
                 _0x2000008:
000724 e0e1      	LDI  R30,LOW(1)
000725 c152      	RJMP _0x2120004
                 _ds1820_read_spd:
000726 940e 0b52 	CALL SUBOPT_0x22
000728 dfe3      	RCALL _ds1820_select
000729 30e0      	CPI  R30,0
00072a f429      	BRNE _0x2000009
00072b e0e0      	LDI  R30,LOW(0)
00072c 940e 0d9e 	CALL __LOADLOCR3
00072e 940c 08f3 	JMP  _0x2120002
                 _0x2000009:
000730 ebee      	LDI  R30,LOW(190)
000731 940e 0b45 	CALL SUBOPT_0x20
                +
000733 e913     +LDI R17 , LOW ( ___ds1820_scratch_pad )
000734 e022     +LDI R18 , HIGH ( ___ds1820_scratch_pad )
                 	__POINTWRM 17,18,___ds1820_scratch_pad
                 _0x200000B:
000735 932f      	PUSH R18
000736 931f      	PUSH R17
                +
000737 5f1f     +SUBI R17 , LOW ( - 1 )
000738 4f2f     +SBCI R18 , HIGH ( - 1 )
                 	__ADDWRN 17,18,1
000739 940e 0bfa 	CALL _w1_read
00073b 91af      	POP  R26
00073c 91bf      	POP  R27
00073d 93ec      	ST   X,R30
00073e 5f0f      	SUBI R16,-LOW(1)
00073f 3009      	CPI  R16,9
000740 f3a0      	BRLO _0x200000B
000741 e9e3      	LDI  R30,LOW(___ds1820_scratch_pad)
000742 e0f2      	LDI  R31,HIGH(___ds1820_scratch_pad)
000743 940e 0b59 	CALL SUBOPT_0x23
000745 940c 08f3 	JMP  _0x2120002
                 _ds1820_temperature_10:
000747 81e8      	LD   R30,Y
000748 81f9      	LDD  R31,Y+1
000749 93fa      	ST   -Y,R31
00074a 93ea      	ST   -Y,R30
00074b dfc0      	RCALL _ds1820_select
00074c 30e0      	CPI  R30,0
00074d f419      	BRNE _0x200000D
00074e efe1      	LDI  R30,LOW(55537)
00074f edf8      	LDI  R31,HIGH(55537)
000750 c0e9      	RJMP _0x2120005
                 _0x200000D:
000751 e4e4      	LDI  R30,LOW(68)
000752 93ea      	ST   -Y,R30
000753 940e 0bff 	CALL _w1_write
000755 e2e6      	LDI  R30,LOW(550)
000756 e0f2      	LDI  R31,HIGH(550)
000757 940e 0a7f 	CALL SUBOPT_0x2
000759 81e8      	LD   R30,Y
00075a 81f9      	LDD  R31,Y+1
00075b 93fa      	ST   -Y,R31
00075c 93ea      	ST   -Y,R30
00075d dfc8      	RCALL _ds1820_read_spd
00075e 30e0      	CPI  R30,0
00075f f419      	BRNE _0x200000E
000760 efe1      	LDI  R30,LOW(55537)
000761 edf8      	LDI  R31,HIGH(55537)
000762 c0d7      	RJMP _0x2120005
                 _0x200000E:
000763 940e 0bb9 	CALL _w1_init
                +
000765 91f0 0294+LDS R31 , ___ds1820_scratch_pad + ( 1 )
                 	__GETB1HMN ___ds1820_scratch_pad,1
000767 e0e0      	LDI  R30,LOW(0)
000768 01df      	MOVW R26,R30
000769 91e0 0293 	LDS  R30,___ds1820_scratch_pad
00076b e0f0      	LDI  R31,0
00076c 2bea      	OR   R30,R26
00076d 2bfb      	OR   R31,R27
00076e e0a5      	LDI  R26,LOW(5)
00076f e0b0      	LDI  R27,HIGH(5)
000770 940e 0d31 	CALL __MULW12
000772 c0c7      	RJMP _0x2120005
                 
                 	.CSEG
                 _ds18b20_select:
000773 930a      	ST   -Y,R16
000774 940e 0bb9 	CALL _w1_init
000776 30e0      	CPI  R30,0
000777 f411      	BRNE _0x2020003
000778 e0e0      	LDI  R30,LOW(0)
000779 c0fe      	RJMP _0x2120004
                 _0x2020003:
00077a 81e9      	LDD  R30,Y+1
00077b 81fa      	LDD  R31,Y+1+1
00077c 9730      	SBIW R30,0
00077d f049      	BREQ _0x2020004
00077e e5e5      	LDI  R30,LOW(85)
00077f 940e 0b45 	CALL SUBOPT_0x20
                 _0x2020006:
000781 940e 0b4a 	CALL SUBOPT_0x21
000783 5f0f      	SUBI R16,-LOW(1)
000784 3008      	CPI  R16,8
000785 f3d8      	BRLO _0x2020006
000786 c004      	RJMP _0x2020008
                 _0x2020004:
000787 ecec      	LDI  R30,LOW(204)
000788 93ea      	ST   -Y,R30
000789 940e 0bff 	CALL _w1_write
                 _0x2020008:
00078b e0e1      	LDI  R30,LOW(1)
00078c c0eb      	RJMP _0x2120004
                 _ds18b20_read_spd:
00078d 940e 0b52 	CALL SUBOPT_0x22
00078f dfe3      	RCALL _ds18b20_select
000790 30e0      	CPI  R30,0
000791 f429      	BRNE _0x2020009
000792 e0e0      	LDI  R30,LOW(0)
000793 940e 0d9e 	CALL __LOADLOCR3
000795 940c 08f3 	JMP  _0x2120002
                 _0x2020009:
000797 ebee      	LDI  R30,LOW(190)
000798 940e 0b45 	CALL SUBOPT_0x20
                +
00079a e91c     +LDI R17 , LOW ( ___ds18b20_scratch_pad )
00079b e022     +LDI R18 , HIGH ( ___ds18b20_scratch_pad )
                 	__POINTWRM 17,18,___ds18b20_scratch_pad
                 _0x202000B:
00079c 932f      	PUSH R18
00079d 931f      	PUSH R17
                +
00079e 5f1f     +SUBI R17 , LOW ( - 1 )
00079f 4f2f     +SBCI R18 , HIGH ( - 1 )
                 	__ADDWRN 17,18,1
0007a0 940e 0bfa 	CALL _w1_read
0007a2 91af      	POP  R26
0007a3 91bf      	POP  R27
0007a4 93ec      	ST   X,R30
0007a5 5f0f      	SUBI R16,-LOW(1)
0007a6 3009      	CPI  R16,9
0007a7 f3a0      	BRLO _0x202000B
0007a8 e9ec      	LDI  R30,LOW(___ds18b20_scratch_pad)
0007a9 e0f2      	LDI  R31,HIGH(___ds18b20_scratch_pad)
0007aa 940e 0b59 	CALL SUBOPT_0x23
0007ac 940c 08f3 	JMP  _0x2120002
                 _ds18b20_temperature:
0007ae 930a      	ST   -Y,R16
0007af 940e 0b64 	CALL SUBOPT_0x24
0007b1 dfdb      	RCALL _ds18b20_read_spd
0007b2 30e0      	CPI  R30,0
0007b3 f419      	BRNE _0x202000D
0007b4 940e 0b69 	CALL SUBOPT_0x25
0007b6 c0c1      	RJMP _0x2120004
                 _0x202000D:
                +
0007b7 91a0 02a0+LDS R26 , ___ds18b20_scratch_pad + ( 4 )
                 	__GETB2MN ___ds18b20_scratch_pad,4
0007b9 e0b0      	LDI  R27,0
0007ba e0e5      	LDI  R30,LOW(5)
0007bb 940e 0d11 	CALL __ASRW12
0007bd 70e3      	ANDI R30,LOW(0x3)
0007be 2f0e      	MOV  R16,R30
0007bf 940e 0b64 	CALL SUBOPT_0x24
0007c1 dfb1      	RCALL _ds18b20_select
0007c2 30e0      	CPI  R30,0
0007c3 f419      	BRNE _0x202000E
0007c4 940e 0b69 	CALL SUBOPT_0x25
0007c6 c0b1      	RJMP _0x2120004
                 _0x202000E:
0007c7 e4e4      	LDI  R30,LOW(68)
0007c8 93ea      	ST   -Y,R30
0007c9 940e 0bff 	CALL _w1_write
0007cb 2fe0      	MOV  R30,R16
0007cc e5a4      	LDI  R26,LOW(_conv_delay_G101*2)
0007cd e0b0      	LDI  R27,HIGH(_conv_delay_G101*2)
0007ce 940e 0aa6 	CALL SUBOPT_0x7
0007d0 0fea      	ADD  R30,R26
0007d1 1ffb      	ADC  R31,R27
0007d2 940e 0d6e 	CALL __GETW1PF
0007d4 940e 0a7f 	CALL SUBOPT_0x2
0007d6 940e 0b64 	CALL SUBOPT_0x24
0007d8 dfb4      	RCALL _ds18b20_read_spd
0007d9 30e0      	CPI  R30,0
0007da f419      	BRNE _0x202000F
0007db 940e 0b69 	CALL SUBOPT_0x25
0007dd c09a      	RJMP _0x2120004
                 _0x202000F:
0007de 940e 0bb9 	CALL _w1_init
0007e0 2fe0      	MOV  R30,R16
0007e1 e5ac      	LDI  R26,LOW(_bit_mask_G101*2)
0007e2 e0b0      	LDI  R27,HIGH(_bit_mask_G101*2)
0007e3 940e 0aa6 	CALL SUBOPT_0x7
0007e5 0fea      	ADD  R30,R26
0007e6 1ffb      	ADC  R31,R27
0007e7 940e 0d6e 	CALL __GETW1PF
0007e9 91a0 029c 	LDS  R26,___ds18b20_scratch_pad
0007eb 91b0 029d 	LDS  R27,___ds18b20_scratch_pad+1
0007ed 23ea      	AND  R30,R26
0007ee 23fb      	AND  R31,R27
0007ef 940e 0d1f 	CALL __CWD1
0007f1 940e 0c85 	CALL __CDF1
                +
0007f3 e0a0     +LDI R26 , LOW ( 0x3D800000 )
0007f4 e0b0     +LDI R27 , HIGH ( 0x3D800000 )
0007f5 e880     +LDI R24 , BYTE3 ( 0x3D800000 )
0007f6 e39d     +LDI R25 , BYTE4 ( 0x3D800000 )
                 	__GETD2N 0x3D800000
0007f7 940e 0cb3 	CALL __MULF12
0007f9 c07e      	RJMP _0x2120004
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G103:
0007fa 81e8      	LD   R30,Y
0007fb 71e0      	ANDI R30,LOW(0x10)
0007fc f011      	BREQ _0x2060004
0007fd 9ac4      	SBI  0x18,4
0007fe c001      	RJMP _0x2060005
                 _0x2060004:
0007ff 98c4      	CBI  0x18,4
                 _0x2060005:
000800 81e8      	LD   R30,Y
000801 72e0      	ANDI R30,LOW(0x20)
000802 f011      	BREQ _0x2060006
000803 9ac5      	SBI  0x18,5
000804 c001      	RJMP _0x2060007
                 _0x2060006:
000805 98c5      	CBI  0x18,5
                 _0x2060007:
000806 81e8      	LD   R30,Y
000807 74e0      	ANDI R30,LOW(0x40)
000808 f011      	BREQ _0x2060008
000809 9ac6      	SBI  0x18,6
00080a c001      	RJMP _0x2060009
                 _0x2060008:
00080b 98c6      	CBI  0x18,6
                 _0x2060009:
00080c 81e8      	LD   R30,Y
00080d 78e0      	ANDI R30,LOW(0x80)
00080e f011      	BREQ _0x206000A
00080f 9ac7      	SBI  0x18,7
000810 c001      	RJMP _0x206000B
                 _0x206000A:
000811 98c7      	CBI  0x18,7
                 _0x206000B:
                +
000812 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
000813 958a     +DEC R24
000814 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
000815 9ac2      	SBI  0x18,2
                +
000816 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000817 958a     +DEC R24
000818 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000819 98c2      	CBI  0x18,2
                +
00081a e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00081b 958a     +DEC R24
00081c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00081d c08f      	RJMP _0x2120003
                 __lcd_write_data:
00081e 81e8      	LD   R30,Y
00081f 93ea      	ST   -Y,R30
000820 dfd9      	RCALL __lcd_write_nibble_G103
000821 81e8          ld    r30,y
000822 95e2          swap  r30
000823 83e8          st    y,r30
000824 81e8      	LD   R30,Y
000825 93ea      	ST   -Y,R30
000826 dfd3      	RCALL __lcd_write_nibble_G103
                +
000827 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000828 958a     +DEC R24
000829 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00082a c082      	RJMP _0x2120003
                 _lcd_gotoxy:
00082b 81e8      	LD   R30,Y
00082c e0f0      	LDI  R31,0
00082d 5cec      	SUBI R30,LOW(-__base_y_G103)
00082e 4ffc      	SBCI R31,HIGH(-__base_y_G103)
00082f 81e0      	LD   R30,Z
000830 81a9      	LDD  R26,Y+1
000831 0fea      	ADD  R30,R26
000832 93ea      	ST   -Y,R30
000833 dfea      	RCALL __lcd_write_data
000834 81e9      	LDD  R30,Y+1
000835 93e0 0338 	STS  __lcd_x,R30
000837 81e8      	LD   R30,Y
000838 93e0 0339 	STS  __lcd_y,R30
                 _0x2120005:
00083a 9622      	ADIW R28,2
00083b 9508      	RET
                 _lcd_clear:
00083c e0e2      	LDI  R30,LOW(2)
00083d 940e 0b6e 	CALL SUBOPT_0x26
00083f e0ec      	LDI  R30,LOW(12)
000840 93ea      	ST   -Y,R30
000841 dfdc      	RCALL __lcd_write_data
000842 e0e1      	LDI  R30,LOW(1)
000843 940e 0b6e 	CALL SUBOPT_0x26
000845 e0e0      	LDI  R30,LOW(0)
000846 93e0 0339 	STS  __lcd_y,R30
000848 93e0 0338 	STS  __lcd_x,R30
00084a 9508      	RET
                 _lcd_putchar:
00084b 81a8      	LD   R26,Y
00084c 30aa      	CPI  R26,LOW(0xA)
00084d f031      	BREQ _0x2060011
00084e 91e0 033a 	LDS  R30,__lcd_maxx
000850 91a0 0338 	LDS  R26,__lcd_x
000852 17ae      	CP   R26,R30
000853 f068      	BRLO _0x2060010
                 _0x2060011:
000854 e0e0      	LDI  R30,LOW(0)
000855 93ea      	ST   -Y,R30
000856 91e0 0339 	LDS  R30,__lcd_y
000858 5fef      	SUBI R30,-LOW(1)
000859 93e0 0339 	STS  __lcd_y,R30
00085b 93ea      	ST   -Y,R30
00085c dfce      	RCALL _lcd_gotoxy
00085d 81a8      	LD   R26,Y
00085e 30aa      	CPI  R26,LOW(0xA)
00085f f409      	BRNE _0x2060013
000860 c04c      	RJMP _0x2120003
                 _0x2060013:
                 _0x2060010:
000861 91e0 0338 	LDS  R30,__lcd_x
000863 5fef      	SUBI R30,-LOW(1)
000864 93e0 0338 	STS  __lcd_x,R30
000866 9ac0      	SBI  0x18,0
000867 81e8      	LD   R30,Y
000868 93ea      	ST   -Y,R30
000869 dfb4      	RCALL __lcd_write_data
00086a 98c0      	CBI  0x18,0
00086b c041      	RJMP _0x2120003
                 _lcd_puts:
00086c 930a      	ST   -Y,R16
                 _0x2060014:
00086d 81a9      	LDD  R26,Y+1
00086e 81ba      	LDD  R27,Y+1+1
00086f 91ed      	LD   R30,X+
000870 83a9      	STD  Y+1,R26
000871 83ba      	STD  Y+1+1,R27
000872 2f0e      	MOV  R16,R30
000873 30e0      	CPI  R30,0
000874 f019      	BREQ _0x2060016
000875 930a      	ST   -Y,R16
000876 dfd4      	RCALL _lcd_putchar
000877 cff5      	RJMP _0x2060014
                 _0x2060016:
                 _0x2120004:
000878 8108      	LDD  R16,Y+0
000879 9623      	ADIW R28,3
00087a 9508      	RET
                 _lcd_init:
00087b 9abc      	SBI  0x17,4
00087c 9abd      	SBI  0x17,5
00087d 9abe      	SBI  0x17,6
00087e 9abf      	SBI  0x17,7
00087f 9aba      	SBI  0x17,2
000880 9ab8      	SBI  0x17,0
000881 9ab9      	SBI  0x17,1
000882 98c2      	CBI  0x18,2
000883 98c0      	CBI  0x18,0
000884 98c1      	CBI  0x18,1
000885 81e8      	LD   R30,Y
000886 93e0 033a 	STS  __lcd_maxx,R30
000888 58e0      	SUBI R30,-LOW(128)
                +
000889 93e0 0336+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
00088b 81e8      	LD   R30,Y
00088c 54e0      	SUBI R30,-LOW(192)
                +
00088d 93e0 0337+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
00088f e1e4      	LDI  R30,LOW(20)
000890 e0f0      	LDI  R31,HIGH(20)
000891 940e 0a7f 	CALL SUBOPT_0x2
000893 940e 0b74 	CALL SUBOPT_0x27
000895 940e 0b74 	CALL SUBOPT_0x27
000897 940e 0b74 	CALL SUBOPT_0x27
000899 e2e0      	LDI  R30,LOW(32)
00089a 93ea      	ST   -Y,R30
00089b df5e      	RCALL __lcd_write_nibble_G103
                +
00089c ec88     +LDI R24 , LOW ( 200 )
00089d e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00089e 9701     +SBIW R24 , 1
00089f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0008a0 e2e8      	LDI  R30,LOW(40)
0008a1 93ea      	ST   -Y,R30
0008a2 df7b      	RCALL __lcd_write_data
0008a3 e0e4      	LDI  R30,LOW(4)
0008a4 93ea      	ST   -Y,R30
0008a5 df78      	RCALL __lcd_write_data
0008a6 e8e5      	LDI  R30,LOW(133)
0008a7 93ea      	ST   -Y,R30
0008a8 df75      	RCALL __lcd_write_data
0008a9 e0e6      	LDI  R30,LOW(6)
0008aa 93ea      	ST   -Y,R30
0008ab df72      	RCALL __lcd_write_data
0008ac df8f      	RCALL _lcd_clear
                 _0x2120003:
0008ad 9621      	ADIW R28,1
0008ae 9508      	RET
                 
                 	.CSEG
                 _abs:
0008af 91e9          ld   r30,y+
0008b0 91f9          ld   r31,y+
0008b1 9730          sbiw r30,0
0008b2 f41a          brpl __abs0
0008b3 95e0          com  r30
0008b4 95f0          com  r31
0008b5 9631          adiw r30,1
                 __abs0:
0008b6 9508          ret
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G105:
0008b7 931a      	ST   -Y,R17
0008b8 930a      	ST   -Y,R16
0008b9 81aa      	LDD  R26,Y+2
0008ba 81bb      	LDD  R27,Y+2+1
0008bb 9612      	ADIW R26,2
0008bc 940e 0d6a 	CALL __GETW1P
0008be 9730      	SBIW R30,0
0008bf f159      	BREQ _0x20A0010
0008c0 81aa      	LDD  R26,Y+2
0008c1 81bb      	LDD  R27,Y+2+1
0008c2 9614      	ADIW R26,4
0008c3 940e 0d6a 	CALL __GETW1P
0008c5 018f      	MOVW R16,R30
0008c6 9730      	SBIW R30,0
0008c7 f061      	BREQ _0x20A0012
                +
0008c8 3002     +CPI R16 , LOW ( 2 )
0008c9 e0e0     +LDI R30 , HIGH ( 2 )
0008ca 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0008cb f0f0      	BRLO _0x20A0013
0008cc 01f8      	MOVW R30,R16
0008cd 9731      	SBIW R30,1
0008ce 018f      	MOVW R16,R30
                +
0008cf 81aa     +LDD R26 , Y + 2
0008d0 81bb     +LDD R27 , Y + 2 + 1
0008d1 9614     +ADIW R26 , 4
0008d2 93ed     +ST X + , R30
0008d3 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x20A0012:
0008d4 81aa      	LDD  R26,Y+2
0008d5 81bb      	LDD  R27,Y+2+1
0008d6 9612      	ADIW R26,2
0008d7 91ed      	LD   R30,X+
0008d8 91fd      	LD   R31,X+
0008d9 9631      	ADIW R30,1
0008da 93fe      	ST   -X,R31
0008db 93ee      	ST   -X,R30
0008dc 9731      	SBIW R30,1
0008dd 81ac      	LDD  R26,Y+4
0008de 83a0      	STD  Z+0,R26
0008df 81aa      	LDD  R26,Y+2
0008e0 81bb      	LDD  R27,Y+2+1
0008e1 940e 0d6a 	CALL __GETW1P
0008e3 23ff      	TST  R31
0008e4 f02a      	BRMI _0x20A0014
0008e5 91ed      	LD   R30,X+
0008e6 91fd      	LD   R31,X+
0008e7 9631      	ADIW R30,1
0008e8 93fe      	ST   -X,R31
0008e9 93ee      	ST   -X,R30
                 _0x20A0014:
                 _0x20A0013:
0008ea c006      	RJMP _0x20A0015
                 _0x20A0010:
0008eb 81aa      	LDD  R26,Y+2
0008ec 81bb      	LDD  R27,Y+2+1
0008ed efef      	LDI  R30,LOW(65535)
0008ee efff      	LDI  R31,HIGH(65535)
0008ef 93ed      	ST   X+,R30
0008f0 93fc      	ST   X,R31
                 _0x20A0015:
0008f1 8119      	LDD  R17,Y+1
0008f2 8108      	LDD  R16,Y+0
                 _0x2120002:
0008f3 9625      	ADIW R28,5
0008f4 9508      	RET
                 __print_G105:
0008f5 9726      	SBIW R28,6
0008f6 940e 0d94 	CALL __SAVELOCR6
0008f8 e000      	LDI  R16,0
0008f9 85ac      	LDD  R26,Y+12
0008fa 85bd      	LDD  R27,Y+12+1
0008fb e0e0      	LDI  R30,LOW(0)
0008fc e0f0      	LDI  R31,HIGH(0)
0008fd 93ed      	ST   X+,R30
0008fe 93fc      	ST   X,R31
                 _0x20A0016:
0008ff 89ea      	LDD  R30,Y+18
000900 89fb      	LDD  R31,Y+18+1
000901 9631      	ADIW R30,1
000902 8bea      	STD  Y+18,R30
000903 8bfb      	STD  Y+18+1,R31
000904 9731      	SBIW R30,1
000905 91e4      	LPM  R30,Z
000906 2f3e      	MOV  R19,R30
000907 30e0      	CPI  R30,0
000908 f411      	BRNE PC+3
000909 940c 0a22 	JMP _0x20A0018
00090b 2fe0      	MOV  R30,R16
00090c 30e0      	CPI  R30,0
00090d f439      	BRNE _0x20A001C
00090e 3235      	CPI  R19,37
00090f f411      	BRNE _0x20A001D
000910 e001      	LDI  R16,LOW(1)
000911 c002      	RJMP _0x20A001E
                 _0x20A001D:
000912 940e 0b7d 	CALL SUBOPT_0x28
                 _0x20A001E:
000914 c10c      	RJMP _0x20A001B
                 _0x20A001C:
000915 30e1      	CPI  R30,LOW(0x1)
000916 f4a9      	BRNE _0x20A001F
000917 3235      	CPI  R19,37
000918 f419      	BRNE _0x20A0020
000919 940e 0b7d 	CALL SUBOPT_0x28
00091b c104      	RJMP _0x20A00C9
                 _0x20A0020:
00091c e002      	LDI  R16,LOW(2)
00091d e050      	LDI  R21,LOW(0)
00091e e010      	LDI  R17,LOW(0)
00091f 323d      	CPI  R19,45
000920 f411      	BRNE _0x20A0021
000921 e011      	LDI  R17,LOW(1)
000922 c0fe      	RJMP _0x20A001B
                 _0x20A0021:
000923 323b      	CPI  R19,43
000924 f411      	BRNE _0x20A0022
000925 e25b      	LDI  R21,LOW(43)
000926 c0fa      	RJMP _0x20A001B
                 _0x20A0022:
000927 3230      	CPI  R19,32
000928 f411      	BRNE _0x20A0023
000929 e250      	LDI  R21,LOW(32)
00092a c0f6      	RJMP _0x20A001B
                 _0x20A0023:
00092b c002      	RJMP _0x20A0024
                 _0x20A001F:
00092c 30e2      	CPI  R30,LOW(0x2)
00092d f439      	BRNE _0x20A0025
                 _0x20A0024:
00092e e040      	LDI  R20,LOW(0)
00092f e003      	LDI  R16,LOW(3)
000930 3330      	CPI  R19,48
000931 f411      	BRNE _0x20A0026
000932 6810      	ORI  R17,LOW(128)
000933 c0ed      	RJMP _0x20A001B
                 _0x20A0026:
000934 c004      	RJMP _0x20A0027
                 _0x20A0025:
000935 30e3      	CPI  R30,LOW(0x3)
000936 f011      	BREQ PC+3
000937 940c 0a21 	JMP _0x20A001B
                 _0x20A0027:
000939 3330      	CPI  R19,48
00093a f010      	BRLO _0x20A002A
00093b 333a      	CPI  R19,58
00093c f008      	BRLO _0x20A002B
                 _0x20A002A:
00093d c007      	RJMP _0x20A0029
                 _0x20A002B:
00093e e0aa      	LDI  R26,LOW(10)
00093f 9f4a      	MUL  R20,R26
000940 2d40      	MOV  R20,R0
000941 2fe3      	MOV  R30,R19
000942 53e0      	SUBI R30,LOW(48)
000943 0f4e      	ADD  R20,R30
000944 c0dc      	RJMP _0x20A001B
                 _0x20A0029:
000945 2fe3      	MOV  R30,R19
000946 36e3      	CPI  R30,LOW(0x63)
000947 f449      	BRNE _0x20A002F
000948 940e 0b86 	CALL SUBOPT_0x29
00094a 89e8      	LDD  R30,Y+16
00094b 89f9      	LDD  R31,Y+16+1
00094c 81a4      	LDD  R26,Z+4
00094d 93aa      	ST   -Y,R26
00094e 940e 0b8c 	CALL SUBOPT_0x2A
000950 c0cf      	RJMP _0x20A0030
                 _0x20A002F:
000951 37e3      	CPI  R30,LOW(0x73)
000952 f441      	BRNE _0x20A0032
000953 940e 0b86 	CALL SUBOPT_0x29
000955 940e 0b94 	CALL SUBOPT_0x2B
000957 940e 0a60 	CALL _strlen
000959 2f0e      	MOV  R16,R30
00095a c00a      	RJMP _0x20A0033
                 _0x20A0032:
00095b 37e0      	CPI  R30,LOW(0x70)
00095c f461      	BRNE _0x20A0035
00095d 940e 0b86 	CALL SUBOPT_0x29
00095f 940e 0b94 	CALL SUBOPT_0x2B
000961 940e 0a6a 	CALL _strlenf
000963 2f0e      	MOV  R16,R30
000964 6018      	ORI  R17,LOW(8)
                 _0x20A0033:
000965 6012      	ORI  R17,LOW(2)
000966 771f      	ANDI R17,LOW(127)
000967 e020      	LDI  R18,LOW(0)
000968 c035      	RJMP _0x20A0036
                 _0x20A0035:
000969 36e4      	CPI  R30,LOW(0x64)
00096a f011      	BREQ _0x20A0039
00096b 36e9      	CPI  R30,LOW(0x69)
00096c f411      	BRNE _0x20A003A
                 _0x20A0039:
00096d 6014      	ORI  R17,LOW(4)
00096e c002      	RJMP _0x20A003B
                 _0x20A003A:
00096f 37e5      	CPI  R30,LOW(0x75)
000970 f431      	BRNE _0x20A003C
                 _0x20A003B:
000971 e6e4      	LDI  R30,LOW(_tbl10_G105*2)
000972 e0f0      	LDI  R31,HIGH(_tbl10_G105*2)
000973 83ee      	STD  Y+6,R30
000974 83ff      	STD  Y+6+1,R31
000975 e005      	LDI  R16,LOW(5)
000976 c00d      	RJMP _0x20A003D
                 _0x20A003C:
000977 35e8      	CPI  R30,LOW(0x58)
000978 f411      	BRNE _0x20A003F
000979 6018      	ORI  R17,LOW(8)
00097a c004      	RJMP _0x20A0040
                 _0x20A003F:
00097b 37e8      	CPI  R30,LOW(0x78)
00097c f011      	BREQ PC+3
00097d 940c 0a20 	JMP _0x20A0071
                 _0x20A0040:
00097f e6ee      	LDI  R30,LOW(_tbl16_G105*2)
000980 e0f0      	LDI  R31,HIGH(_tbl16_G105*2)
000981 83ee      	STD  Y+6,R30
000982 83ff      	STD  Y+6+1,R31
000983 e004      	LDI  R16,LOW(4)
                 _0x20A003D:
000984 ff12      	SBRS R17,2
000985 c014      	RJMP _0x20A0042
000986 940e 0b86 	CALL SUBOPT_0x29
000988 940e 0b9e 	CALL SUBOPT_0x2C
00098a 85ab      	LDD  R26,Y+11
00098b 23aa      	TST  R26
00098c f43a      	BRPL _0x20A0043
00098d 85ea      	LDD  R30,Y+10
00098e 85fb      	LDD  R31,Y+10+1
00098f 940e 0d05 	CALL __ANEGW1
000991 87ea      	STD  Y+10,R30
000992 87fb      	STD  Y+10+1,R31
000993 e25d      	LDI  R21,LOW(45)
                 _0x20A0043:
000994 3050      	CPI  R21,0
000995 f011      	BREQ _0x20A0044
000996 5f0f      	SUBI R16,-LOW(1)
000997 c001      	RJMP _0x20A0045
                 _0x20A0044:
000998 7f1b      	ANDI R17,LOW(251)
                 _0x20A0045:
000999 c004      	RJMP _0x20A0046
                 _0x20A0042:
00099a 940e 0b86 	CALL SUBOPT_0x29
00099c 940e 0b9e 	CALL SUBOPT_0x2C
                 _0x20A0046:
                 _0x20A0036:
00099e fd10      	SBRC R17,0
00099f c011      	RJMP _0x20A0047
                 _0x20A0048:
0009a0 1704      	CP   R16,R20
0009a1 f478      	BRSH _0x20A004A
0009a2 ff17      	SBRS R17,7
0009a3 c008      	RJMP _0x20A004B
0009a4 ff12      	SBRS R17,2
0009a5 c004      	RJMP _0x20A004C
0009a6 7f1b      	ANDI R17,LOW(251)
0009a7 2f35      	MOV  R19,R21
0009a8 5001      	SUBI R16,LOW(1)
0009a9 c001      	RJMP _0x20A004D
                 _0x20A004C:
0009aa e330      	LDI  R19,LOW(48)
                 _0x20A004D:
0009ab c001      	RJMP _0x20A004E
                 _0x20A004B:
0009ac e230      	LDI  R19,LOW(32)
                 _0x20A004E:
0009ad 940e 0b7d 	CALL SUBOPT_0x28
0009af 5041      	SUBI R20,LOW(1)
0009b0 cfef      	RJMP _0x20A0048
                 _0x20A004A:
                 _0x20A0047:
0009b1 2f20      	MOV  R18,R16
0009b2 ff11      	SBRS R17,1
0009b3 c017      	RJMP _0x20A004F
                 _0x20A0050:
0009b4 3020      	CPI  R18,0
0009b5 f0a1      	BREQ _0x20A0052
0009b6 ff13      	SBRS R17,3
0009b7 c006      	RJMP _0x20A0053
0009b8 81ee      	LDD  R30,Y+6
0009b9 81ff      	LDD  R31,Y+6+1
0009ba 9135      	LPM  R19,Z+
0009bb 83ee      	STD  Y+6,R30
0009bc 83ff      	STD  Y+6+1,R31
0009bd c005      	RJMP _0x20A0054
                 _0x20A0053:
0009be 81ae      	LDD  R26,Y+6
0009bf 81bf      	LDD  R27,Y+6+1
0009c0 913d      	LD   R19,X+
0009c1 83ae      	STD  Y+6,R26
0009c2 83bf      	STD  Y+6+1,R27
                 _0x20A0054:
0009c3 940e 0b7d 	CALL SUBOPT_0x28
0009c5 3040      	CPI  R20,0
0009c6 f009      	BREQ _0x20A0055
0009c7 5041      	SUBI R20,LOW(1)
                 _0x20A0055:
0009c8 5021      	SUBI R18,LOW(1)
0009c9 cfea      	RJMP _0x20A0050
                 _0x20A0052:
0009ca c04b      	RJMP _0x20A0056
                 _0x20A004F:
                 _0x20A0058:
0009cb e330      	LDI  R19,LOW(48)
0009cc 81ee      	LDD  R30,Y+6
0009cd 81ff      	LDD  R31,Y+6+1
0009ce 940e 0d6e 	CALL __GETW1PF
0009d0 87e8      	STD  Y+8,R30
0009d1 87f9      	STD  Y+8+1,R31
0009d2 81ee      	LDD  R30,Y+6
0009d3 81ff      	LDD  R31,Y+6+1
0009d4 9632      	ADIW R30,2
0009d5 83ee      	STD  Y+6,R30
0009d6 83ff      	STD  Y+6+1,R31
                 _0x20A005A:
0009d7 85e8      	LDD  R30,Y+8
0009d8 85f9      	LDD  R31,Y+8+1
0009d9 85aa      	LDD  R26,Y+10
0009da 85bb      	LDD  R27,Y+10+1
0009db 17ae      	CP   R26,R30
0009dc 07bf      	CPC  R27,R31
0009dd f050      	BRLO _0x20A005C
0009de 5f3f      	SUBI R19,-LOW(1)
0009df 85a8      	LDD  R26,Y+8
0009e0 85b9      	LDD  R27,Y+8+1
0009e1 85ea      	LDD  R30,Y+10
0009e2 85fb      	LDD  R31,Y+10+1
0009e3 1bea      	SUB  R30,R26
0009e4 0bfb      	SBC  R31,R27
0009e5 87ea      	STD  Y+10,R30
0009e6 87fb      	STD  Y+10+1,R31
0009e7 cfef      	RJMP _0x20A005A
                 _0x20A005C:
0009e8 333a      	CPI  R19,58
0009e9 f028      	BRLO _0x20A005D
0009ea ff13      	SBRS R17,3
0009eb c002      	RJMP _0x20A005E
0009ec 5f39      	SUBI R19,-LOW(7)
0009ed c001      	RJMP _0x20A005F
                 _0x20A005E:
0009ee 5d39      	SUBI R19,-LOW(39)
                 _0x20A005F:
                 _0x20A005D:
0009ef fd14      	SBRC R17,4
0009f0 c01a      	RJMP _0x20A0061
0009f1 3331      	CPI  R19,49
0009f2 f420      	BRSH _0x20A0063
0009f3 85a8      	LDD  R26,Y+8
0009f4 85b9      	LDD  R27,Y+8+1
0009f5 9711      	SBIW R26,1
0009f6 f409      	BRNE _0x20A0062
                 _0x20A0063:
0009f7 c009      	RJMP _0x20A00CA
                 _0x20A0062:
0009f8 1742      	CP   R20,R18
0009f9 f010      	BRLO _0x20A0067
0009fa ff10      	SBRS R17,0
0009fb c001      	RJMP _0x20A0068
                 _0x20A0067:
0009fc c013      	RJMP _0x20A0066
                 _0x20A0068:
0009fd e230      	LDI  R19,LOW(32)
0009fe ff17      	SBRS R17,7
0009ff c00b      	RJMP _0x20A0069
000a00 e330      	LDI  R19,LOW(48)
                 _0x20A00CA:
000a01 6110      	ORI  R17,LOW(16)
000a02 ff12      	SBRS R17,2
000a03 c007      	RJMP _0x20A006A
000a04 7f1b      	ANDI R17,LOW(251)
000a05 935a      	ST   -Y,R21
000a06 940e 0b8c 	CALL SUBOPT_0x2A
000a08 3040      	CPI  R20,0
000a09 f009      	BREQ _0x20A006B
000a0a 5041      	SUBI R20,LOW(1)
                 _0x20A006B:
                 _0x20A006A:
                 _0x20A0069:
                 _0x20A0061:
000a0b 940e 0b7d 	CALL SUBOPT_0x28
000a0d 3040      	CPI  R20,0
000a0e f009      	BREQ _0x20A006C
000a0f 5041      	SUBI R20,LOW(1)
                 _0x20A006C:
                 _0x20A0066:
000a10 5021      	SUBI R18,LOW(1)
000a11 85a8      	LDD  R26,Y+8
000a12 85b9      	LDD  R27,Y+8+1
000a13 9712      	SBIW R26,2
000a14 f008      	BRLO _0x20A0059
000a15 cfb5      	RJMP _0x20A0058
                 _0x20A0059:
                 _0x20A0056:
000a16 ff10      	SBRS R17,0
000a17 c008      	RJMP _0x20A006D
                 _0x20A006E:
000a18 3040      	CPI  R20,0
000a19 f031      	BREQ _0x20A0070
000a1a 5041      	SUBI R20,LOW(1)
000a1b e2e0      	LDI  R30,LOW(32)
000a1c 93ea      	ST   -Y,R30
000a1d 940e 0b8c 	CALL SUBOPT_0x2A
000a1f cff8      	RJMP _0x20A006E
                 _0x20A0070:
                 _0x20A006D:
                 _0x20A0071:
                 _0x20A0030:
                 _0x20A00C9:
000a20 e000      	LDI  R16,LOW(0)
                 _0x20A001B:
000a21 cedd      	RJMP _0x20A0016
                 _0x20A0018:
000a22 85ac      	LDD  R26,Y+12
000a23 85bd      	LDD  R27,Y+12+1
000a24 940e 0d6a 	CALL __GETW1P
000a26 940e 0d9b 	CALL __LOADLOCR6
000a28 9664      	ADIW R28,20
000a29 9508      	RET
                 _sprintf:
000a2a 92ff      	PUSH R15
000a2b 2ef8      	MOV  R15,R24
000a2c 9726      	SBIW R28,6
000a2d 940e 0d96 	CALL __SAVELOCR4
000a2f 940e 0ba6 	CALL SUBOPT_0x2D
000a31 9730      	SBIW R30,0
000a32 f419      	BRNE _0x20A0072
000a33 efef      	LDI  R30,LOW(65535)
000a34 efff      	LDI  R31,HIGH(65535)
000a35 c025      	RJMP _0x2120001
                 _0x20A0072:
000a36 01de      	MOVW R26,R28
000a37 9616      	ADIW R26,6
000a38 940e 0d01 	CALL __ADDW2R15
000a3a 018d      	MOVW R16,R26
000a3b 940e 0ba6 	CALL SUBOPT_0x2D
000a3d 83ee      	STD  Y+6,R30
000a3e 83ff      	STD  Y+6+1,R31
000a3f e0e0      	LDI  R30,LOW(0)
000a40 87e8      	STD  Y+8,R30
000a41 87e9      	STD  Y+8+1,R30
000a42 01de      	MOVW R26,R28
000a43 961a      	ADIW R26,10
000a44 940e 0d01 	CALL __ADDW2R15
000a46 940e 0d6a 	CALL __GETW1P
000a48 93fa      	ST   -Y,R31
000a49 93ea      	ST   -Y,R30
000a4a 931a      	ST   -Y,R17
000a4b 930a      	ST   -Y,R16
000a4c ebe7      	LDI  R30,LOW(_put_buff_G105)
000a4d e0f8      	LDI  R31,HIGH(_put_buff_G105)
000a4e 93fa      	ST   -Y,R31
000a4f 93ea      	ST   -Y,R30
000a50 01fe      	MOVW R30,R28
000a51 963a      	ADIW R30,10
000a52 93fa      	ST   -Y,R31
000a53 93ea      	ST   -Y,R30
000a54 dea0      	RCALL __print_G105
000a55 019f      	MOVW R18,R30
000a56 81ae      	LDD  R26,Y+6
000a57 81bf      	LDD  R27,Y+6+1
000a58 e0e0      	LDI  R30,LOW(0)
000a59 93ec      	ST   X,R30
000a5a 01f9      	MOVW R30,R18
                 _0x2120001:
000a5b 940e 0d9d 	CALL __LOADLOCR4
000a5d 962a      	ADIW R28,10
000a5e 90ff      	POP  R15
000a5f 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
000a60 91a9          ld   r26,y+
000a61 91b9          ld   r27,y+
000a62 27ee          clr  r30
000a63 27ff          clr  r31
                 strlen0:
000a64 916d          ld   r22,x+
000a65 2366          tst  r22
000a66 f011          breq strlen1
000a67 9631          adiw r30,1
000a68 cffb          rjmp strlen0
                 strlen1:
000a69 9508          ret
                 _strlenf:
000a6a 27aa          clr  r26
000a6b 27bb          clr  r27
000a6c 91e9          ld   r30,y+
000a6d 91f9          ld   r31,y+
                 strlenf0:
000a6e 9005      	lpm  r0,z+
000a6f 2000          tst  r0
000a70 f011          breq strlenf1
000a71 9611          adiw r26,1
000a72 cffb          rjmp strlenf0
                 strlenf1:
000a73 01fd          movw r30,r26
000a74 9508          ret
                 
                 	.DSEG
                 ___ds1820_scratch_pad:
000293           	.BYTE 0x9
                 ___ds18b20_scratch_pad:
00029c           	.BYTE 0x9
                 
                 	.ESEG
                 _ds1820_rom_codes:
000000 28
000001 ff
000002 e0
000003 2f        	.DB  LOW(0x2FE0FF28),HIGH(0x2FE0FF28),BYTE3(0x2FE0FF28),BYTE4(0x2FE0FF28)
000004 90
000005 15
000006 03
000007 a1        	.DB  LOW(0xA1031590),HIGH(0xA1031590),BYTE3(0xA1031590),BYTE4(0xA1031590)
000008 00
000009 28
00000a ff
00000b 0b        	.DB  LOW(0xBFF2800),HIGH(0xBFF2800),BYTE3(0xBFF2800),BYTE4(0xBFF2800)
00000c 54
00000d 73
00000e 15
00000f 01        	.DB  LOW(0x1157354),HIGH(0x1157354),BYTE3(0x1157354),BYTE4(0x1157354)
000010 a8
000011 00
000012 28
000013 ff        	.DB  LOW(0xFF2800A8),HIGH(0xFF2800A8),BYTE3(0xFF2800A8),BYTE4(0xFF2800A8)
000014 22
000015 72
000016 90
000017 15        	.DB  LOW(0x15907222),HIGH(0x15907222),BYTE3(0x15907222),BYTE4(0x15907222)
000018 03 45     	.DW  0x4503
00001a 00        	.DB  0x0
                 _MinT:
00001b 1c        	.DB  0x1C
                 _MaxT:
00001c 1e        	.DB  0x1E
                 _MinTCaldron:
00001d 0a        	.DB  0xA
                 _StokerMode:
00001e 00        	.DB  0x0
                 _WorkTime:
00001f 05        	.DB  0x5
                 _IdleTime:
000020 0f        	.DB  0xF
                 _nStart:
000021           	.BYTE 0x1
                 _AutoRestoration:
000022 00        	.DB  0x0
                 
                 	.DSEG
                 _ds1820_devices:
0002a5           	.BYTE 0x1
                 _Temperature:
0002a6           	.BYTE 0x6
                 _TempDec:
0002ac           	.BYTE 0x6
                 _Sign:
0002b2           	.BYTE 0x3
                 _tRadiator:
0002b5           	.BYTE 0x1
                 _tCaldron:
0002b6           	.BYTE 0x1
                 _tOutSide:
0002b7           	.BYTE 0x1
                 _ds1820_sn:
0002b8           	.BYTE 0x1B
                 _MaxT1:
0002d3           	.BYTE 0x1
                 _OnBlock:
0002d4           	.BYTE 0x1
                 _TickCount:
0002d5           	.BYTE 0x2
                 _Errcount:
0002d7           	.BYTE 0x1
                 _k1:
0002d8           	.BYTE 0x1
                 _i:
0002d9           	.BYTE 0x1
                 _BufCRC:
0002da           	.BYTE 0x12
                 _lcd_screen:
0002ec           	.BYTE 0x1
                 _hour23:
0002ed           	.BYTE 0x1
                 _minute23:
0002ee           	.BYTE 0x1
                 _sec23:
0002ef           	.BYTE 0x1
                 _day:
0002f0           	.BYTE 0x1
                 _wday:
0002f1           	.BYTE 0x1
                 _month:
0002f2           	.BYTE 0x1
                 _year:
0002f3           	.BYTE 0x1
                 _t1:
0002f4           	.BYTE 0x1
                 _t2:
0002f5           	.BYTE 0x1
                 _rx_buffer:
0002f6           	.BYTE 0x20
                 _rx_wr_index:
000316           	.BYTE 0x1
                 _rx_rd_index:
000317           	.BYTE 0x1
                 _rx_counter:
000318           	.BYTE 0x1
                 _tx_buffer:
000319           	.BYTE 0x8
                 _tx_wr_index:
000321           	.BYTE 0x1
                 _tx_rd_index:
000322           	.BYTE 0x1
                 _tx_counter:
000323           	.BYTE 0x1
                 _lcd_buffer:
000324           	.BYTE 0x10
                 __base_y_G103:
000334           	.BYTE 0x4
                 __lcd_x:
000338           	.BYTE 0x1
                 __lcd_y:
000339           	.BYTE 0x1
                 __lcd_maxx:
00033a           	.BYTE 0x1
                 __seed_G104:
00033b           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000a75 50e1      	SUBI R30,LOW(1)
000a76 e0f0      	LDI  R31,0
000a77 50ea      	SUBI R30,LOW(-_rx_buffer)
000a78 4ffd      	SBCI R31,HIGH(-_rx_buffer)
000a79 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000a7a 50e1      	SUBI R30,LOW(1)
000a7b e0f0      	LDI  R31,0
000a7c 5ee7      	SUBI R30,LOW(-_tx_buffer)
000a7d 4ffc      	SBCI R31,HIGH(-_tx_buffer)
000a7e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
000a7f 93fa      	ST   -Y,R31
000a80 93ea      	ST   -Y,R30
000a81 940c 0bad 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000a83 81ee      	LDD  R30,Y+6
000a84 e0a9      	LDI  R26,LOW(9)
000a85 9fea      	MUL  R30,R26
000a86 01f0      	MOVW R30,R0
000a87 54e8      	SUBI R30,LOW(-_ds1820_sn)
000a88 4ffd      	SBCI R31,HIGH(-_ds1820_sn)
000a89 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
000a8a 81ee      	LDD  R30,Y+6
000a8b e0f0      	LDI  R31,0
000a8c 54ee      	SUBI R30,LOW(-_Sign)
000a8d 4ffd      	SBCI R31,HIGH(-_Sign)
000a8e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x5:
000a8f 940e 08af 	CALL _abs
000a91 018f      	MOVW R16,R30
000a92 81ee      	LDD  R30,Y+6
000a93 eaac      	LDI  R26,LOW(_TempDec)
000a94 e0b2      	LDI  R27,HIGH(_TempDec)
000a95 e0f0      	LDI  R31,0
000a96 0fee      	LSL  R30
000a97 1fff      	ROL  R31
000a98 0fea      	ADD  R30,R26
000a99 1ffb      	ADC  R31,R27
000a9a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
000a9b 93ed      	ST   X+,R30
000a9c 93fc      	ST   X,R31
000a9d 81ee      	LDD  R30,Y+6
000a9e eaac      	LDI  R26,LOW(_TempDec)
000a9f e0b2      	LDI  R27,HIGH(_TempDec)
000aa0 e0f0      	LDI  R31,0
000aa1 0fee      	LSL  R30
000aa2 1fff      	ROL  R31
000aa3 0fea      	ADD  R30,R26
000aa4 1ffb      	ADC  R31,R27
000aa5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
000aa6 e0f0      	LDI  R31,0
000aa7 0fee      	LSL  R30
000aa8 1fff      	ROL  R31
000aa9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
000aaa e0ea      	LDI  R30,LOW(10)
000aab e0f0      	LDI  R31,HIGH(10)
000aac 940e 0d4e 	CALL __MODW21
000aae 01db      	MOVW R26,R22
000aaf 93ed      	ST   X+,R30
000ab0 93fc      	ST   X,R31
000ab1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x9:
                +
000ab2 91e0 02a8+LDS R30 , _Temperature + ( 2 )
000ab4 91f0 02a9+LDS R31 , _Temperature + ( 2 ) + 1
                 	__GETW1MN _Temperature,2
000ab6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xA:
000ab7 e2e4      	LDI  R30,LOW(_lcd_buffer)
000ab8 e0f3      	LDI  R31,HIGH(_lcd_buffer)
000ab9 93fa      	ST   -Y,R31
000aba 93ea      	ST   -Y,R30
000abb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
000abc 940e 0d1f 	CALL __CWD1
000abe 940e 0d72 	CALL __PUTPARD1
000ac0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
000ac1 e088      	LDI  R24,8
000ac2 940e 0a2a 	CALL _sprintf
000ac4 962c      	ADIW R28,12
000ac5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xD:
000ac6 91a0 02a6 	LDS  R26,_Temperature
000ac8 91b0 02a7 	LDS  R27,_Temperature+1
000aca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000acb e0e0      	LDI  R30,LOW(0)
000acc 93ea      	ST   -Y,R30
000acd e0e1      	LDI  R30,LOW(1)
000ace 93ea      	ST   -Y,R30
000acf 940c 082b 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
                +
000ad1 91e0 02aa+LDS R30 , _Temperature + ( 4 )
000ad3 91f0 02ab+LDS R31 , _Temperature + ( 4 ) + 1
                 	__GETW1MN _Temperature,4
000ad5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000ad6 91e0 02d8 	LDS  R30,_k1
000ad8 eaa6      	LDI  R26,LOW(_Temperature)
000ad9 e0b2      	LDI  R27,HIGH(_Temperature)
000ada cfcb      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
000adb e1ae      	LDI  R26,LOW(_StokerMode)
000adc e0b0      	LDI  R27,HIGH(_StokerMode)
000add 940e 0d77 	CALL __EEPROMRDB
000adf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x12:
000ae0 940e 0d83 	CALL __EEPROMWRB
000ae2 e0e0      	LDI  R30,LOW(0)
000ae3 93e0 02d5 	STS  _TickCount,R30
000ae5 93e0 02d6 	STS  _TickCount+1,R30
000ae7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
000ae8 e0f0      	LDI  R31,0
000ae9 9730      	SBIW R30,0
000aea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
000aeb e0f0      	LDI  R31,0
000aec 17ae      	CP   R26,R30
000aed 07bf      	CPC  R27,R31
000aee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x15:
000aef dfd6      	RCALL SUBOPT_0xD
000af0 3aa6      	CPI  R26,LOW(0xFFA6)
000af1 efef      	LDI  R30,HIGH(0xFFA6)
000af2 07be      	CPC  R27,R30
000af3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x16:
000af4 940e 0d77 	CALL __EEPROMRDB
000af6 e3ac      	LDI  R26,LOW(60)
000af7 9fea      	MUL  R30,R26
000af8 01f0      	MOVW R30,R0
000af9 91a0 02d5 	LDS  R26,_TickCount
000afb 91b0 02d6 	LDS  R27,_TickCount+1
000afd 17ea      	CP   R30,R26
000afe 07fb      	CPC  R31,R27
000aff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x17:
000b00 ebe8      	LDI  R30,LOW(_ds1820_sn)
000b01 e0f2      	LDI  R31,HIGH(_ds1820_sn)
000b02 93fa      	ST   -Y,R31
000b03 93ea      	ST   -Y,R30
000b04 e0e0      	LDI  R30,LOW(_ds1820_rom_codes)
000b05 e0f0      	LDI  R31,HIGH(_ds1820_rom_codes)
000b06 93fa      	ST   -Y,R31
000b07 93ea      	ST   -Y,R30
000b08 940e 00bc 	CALL _sncpy
                +
000b0a ece1     +LDI R30 , LOW ( _ds1820_sn + ( 9 ) )
000b0b e0f2     +LDI R31 , HIGH ( _ds1820_sn + ( 9 ) )
                 	__POINTW1MN _ds1820_sn,9
000b0c 93fa      	ST   -Y,R31
000b0d 93ea      	ST   -Y,R30
                +
000b0e e0e9     +LDI R30 , LOW ( _ds1820_rom_codes + ( 9 ) )
000b0f e0f0     +LDI R31 , HIGH ( _ds1820_rom_codes + ( 9 ) )
                 	__POINTW1MN _ds1820_rom_codes,9
000b10 93fa      	ST   -Y,R31
000b11 93ea      	ST   -Y,R30
000b12 940c 00bc 	JMP  _sncpy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
000b14 91e0 02b5 	LDS  R30,_tRadiator
000b16 93e0 02da 	STS  _BufCRC,R30
000b18 91e0 02b6 	LDS  R30,_tCaldron
                +
000b1a 93e0 02db+STS _BufCRC + ( 1 ) , R30
                 	__PUTB1MN _BufCRC,1
000b1c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x19:
000b1d edea      	LDI  R30,LOW(_BufCRC)
000b1e e0f2      	LDI  R31,HIGH(_BufCRC)
000b1f 93fa      	ST   -Y,R31
000b20 93ea      	ST   -Y,R30
000b21 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x1A:
000b22 91e0 02d9 	LDS  R30,_i
000b24 e0f0      	LDI  R31,0
000b25 52e6      	SUBI R30,LOW(-_BufCRC)
000b26 4ffd      	SBCI R31,HIGH(-_BufCRC)
000b27 81e0      	LD   R30,Z
000b28 93ea      	ST   -Y,R30
000b29 940c 01c4 	JMP  _putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x1B:
000b2b 91e0 02d9 	LDS  R30,_i
000b2d 5fef      	SUBI R30,-LOW(1)
000b2e 93e0 02d9 	STS  _i,R30
000b30 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x1C:
000b31 91e0 02d9 	LDS  R30,_i
000b33 e0f0      	LDI  R31,0
000b34 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1D:
000b35 91a0 02d9 	LDS  R26,_i
000b37 27bb      	CLR  R27
000b38 cff8      	RJMP SUBOPT_0x1C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
000b39 0fea      	ADD  R30,R26
000b3a 1ffb      	ADC  R31,R27
                +
000b3b 52e5     +SUBI R30 , LOW ( - _BufCRC - ( 1 ) )
000b3c 4ffd     +SBCI R31 , HIGH ( - _BufCRC - ( 1 ) )
                 	__ADDW1MN _BufCRC,1
000b3d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1F:
000b3e 93ea      	ST   -Y,R30
000b3f 940e 01c4 	CALL _putchar
000b41 e4e5      	LDI  R30,LOW(69)
000b42 93ea      	ST   -Y,R30
000b43 940c 01c4 	JMP  _putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x20:
000b45 93ea      	ST   -Y,R30
000b46 940e 0bff 	CALL _w1_write
000b48 e000      	LDI  R16,LOW(0)
000b49 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x21:
000b4a 81a9      	LDD  R26,Y+1
000b4b 81ba      	LDD  R27,Y+1+1
000b4c 91ed      	LD   R30,X+
000b4d 83a9      	STD  Y+1,R26
000b4e 83ba      	STD  Y+1+1,R27
000b4f 93ea      	ST   -Y,R30
000b50 940c 0bff 	JMP  _w1_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
000b52 940e 0d97 	CALL __SAVELOCR3
000b54 81eb      	LDD  R30,Y+3
000b55 81fc      	LDD  R31,Y+3+1
000b56 93fa      	ST   -Y,R31
000b57 93ea      	ST   -Y,R30
000b58 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x23:
000b59 93fa      	ST   -Y,R31
000b5a 93ea      	ST   -Y,R30
000b5b e0e9      	LDI  R30,LOW(9)
000b5c 93ea      	ST   -Y,R30
000b5d 940e 0c09 	CALL _w1_dow_crc8
000b5f 940e 0d24 	CALL __LNEGB1
000b61 940e 0d9e 	CALL __LOADLOCR3
000b63 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x24:
000b64 81e9      	LDD  R30,Y+1
000b65 81fa      	LDD  R31,Y+1+1
000b66 93fa      	ST   -Y,R31
000b67 93ea      	ST   -Y,R30
000b68 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x25:
                +
000b69 e0e0     +LDI R30 , LOW ( 0xC61C3C00 )
000b6a e3fc     +LDI R31 , HIGH ( 0xC61C3C00 )
000b6b e16c     +LDI R22 , BYTE3 ( 0xC61C3C00 )
000b6c ec76     +LDI R23 , BYTE4 ( 0xC61C3C00 )
                 	__GETD1N 0xC61C3C00
000b6d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x26:
000b6e 93ea      	ST   -Y,R30
000b6f 940e 081e 	CALL __lcd_write_data
000b71 e0e3      	LDI  R30,LOW(3)
000b72 e0f0      	LDI  R31,HIGH(3)
000b73 cf0b      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x27:
000b74 e3e0      	LDI  R30,LOW(48)
000b75 93ea      	ST   -Y,R30
000b76 940e 07fa 	CALL __lcd_write_nibble_G103
                +
000b78 ec88     +LDI R24 , LOW ( 200 )
000b79 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000b7a 9701     +SBIW R24 , 1
000b7b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000b7c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x28:
000b7d 933a      	ST   -Y,R19
000b7e 85ed      	LDD  R30,Y+13
000b7f 85fe      	LDD  R31,Y+13+1
000b80 93fa      	ST   -Y,R31
000b81 93ea      	ST   -Y,R30
000b82 89e9      	LDD  R30,Y+17
000b83 89fa      	LDD  R31,Y+17+1
000b84 9509      	ICALL
000b85 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x29:
000b86 89e8      	LDD  R30,Y+16
000b87 89f9      	LDD  R31,Y+16+1
000b88 9734      	SBIW R30,4
000b89 8be8      	STD  Y+16,R30
000b8a 8bf9      	STD  Y+16+1,R31
000b8b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2A:
000b8c 85ed      	LDD  R30,Y+13
000b8d 85fe      	LDD  R31,Y+13+1
000b8e 93fa      	ST   -Y,R31
000b8f 93ea      	ST   -Y,R30
000b90 89e9      	LDD  R30,Y+17
000b91 89fa      	LDD  R31,Y+17+1
000b92 9509      	ICALL
000b93 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2B:
000b94 89a8      	LDD  R26,Y+16
000b95 89b9      	LDD  R27,Y+16+1
000b96 9614      	ADIW R26,4
000b97 940e 0d6a 	CALL __GETW1P
000b99 83ee      	STD  Y+6,R30
000b9a 83ff      	STD  Y+6+1,R31
000b9b 93fa      	ST   -Y,R31
000b9c 93ea      	ST   -Y,R30
000b9d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2C:
000b9e 89a8      	LDD  R26,Y+16
000b9f 89b9      	LDD  R27,Y+16+1
000ba0 9614      	ADIW R26,4
000ba1 940e 0d6a 	CALL __GETW1P
000ba3 87ea      	STD  Y+10,R30
000ba4 87fb      	STD  Y+10+1,R31
000ba5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2D:
000ba6 01de      	MOVW R26,R28
000ba7 961c      	ADIW R26,12
000ba8 940e 0d01 	CALL __ADDW2R15
000baa 940e 0d6a 	CALL __GETW1P
000bac 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000bad 91e9      	ld   r30,y+
000bae 91f9      	ld   r31,y+
000baf 9630      	adiw r30,0
000bb0 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000bb1 ed80     +LDI R24 , LOW ( 0x7D0 )
000bb2 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000bb3 9701     +SBIW R24 , 1
000bb4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000bb5 95a8      	wdr
000bb6 9731      	sbiw r30,1
000bb7 f7c9      	brne __delay_ms0
                 __delay_ms1:
000bb8 9508      	ret
                 
                 _w1_init:
000bb9 27ee      	clr  r30
000bba 9896      	cbi  __w1_port,__w1_bit
000bbb 9a8e      	sbi  __w1_port-1,__w1_bit
                +
000bbc ec80     +LDI R24 , LOW ( 0x3C0 )
000bbd e093     +LDI R25 , HIGH ( 0x3C0 )
                +__DELAY_USW_LOOP :
000bbe 9701     +SBIW R24 , 1
000bbf f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3C0
000bc0 988e      	cbi  __w1_port-1,__w1_bit
                +
000bc1 e285     +LDI R24 , LOW ( 0x25 )
                +__DELAY_USB_LOOP :
000bc2 958a     +DEC R24
000bc3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x25
000bc4 9b86      	sbis __w1_port-2,__w1_bit
000bc5 9508      	ret
                +
000bc6 ec8b     +LDI R24 , LOW ( 0xCB )
                +__DELAY_USB_LOOP :
000bc7 958a     +DEC R24
000bc8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xCB
000bc9 9b86      	sbis __w1_port-2,__w1_bit
000bca e0e1      	ldi  r30,1
                +
000bcb e08c     +LDI R24 , LOW ( 0x30C )
000bcc e093     +LDI R25 , HIGH ( 0x30C )
                +__DELAY_USW_LOOP :
000bcd 9701     +SBIW R24 , 1
000bce f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x30C
000bcf 9508      	ret
                 
                 __w1_read_bit:
000bd0 9a8e      	sbi  __w1_port-1,__w1_bit
                +
000bd1 e085     +LDI R24 , LOW ( 0x5 )
                +__DELAY_USB_LOOP :
000bd2 958a     +DEC R24
000bd3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x5
000bd4 988e      	cbi  __w1_port-1,__w1_bit
                +
000bd5 e18d     +LDI R24 , LOW ( 0x1D )
                +__DELAY_USB_LOOP :
000bd6 958a     +DEC R24
000bd7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x1D
000bd8 9488      	clc
000bd9 9986      	sbic __w1_port-2,__w1_bit
000bda 9408      	sec
000bdb 95e7      	ror  r30
                +
000bdc ed85     +LDI R24 , LOW ( 0xD5 )
                +__DELAY_USB_LOOP :
000bdd 958a     +DEC R24
000bde f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xD5
000bdf 9508      	ret
                 
                 __w1_write_bit:
000be0 94e8      	clt
000be1 9a8e      	sbi  __w1_port-1,__w1_bit
                +
000be2 e085     +LDI R24 , LOW ( 0x5 )
                +__DELAY_USB_LOOP :
000be3 958a     +DEC R24
000be4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x5
000be5 fd70      	sbrc r23,0
000be6 988e      	cbi  __w1_port-1,__w1_bit
                +
000be7 e283     +LDI R24 , LOW ( 0x23 )
                +__DELAY_USB_LOOP :
000be8 958a     +DEC R24
000be9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x23
000bea 9986      	sbic __w1_port-2,__w1_bit
000beb c003      	rjmp __w1_write_bit0
000bec ff70      	sbrs r23,0
000bed c003      	rjmp __w1_write_bit1
000bee 9508      	ret
                 __w1_write_bit0:
000bef ff70      	sbrs r23,0
000bf0 9508      	ret
                 __w1_write_bit1:
                +
000bf1 ec88     +LDI R24 , LOW ( 0xC8 )
                +__DELAY_USB_LOOP :
000bf2 958a     +DEC R24
000bf3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xC8
000bf4 988e      	cbi  __w1_port-1,__w1_bit
                +
000bf5 e08d     +LDI R24 , LOW ( 0xD )
                +__DELAY_USB_LOOP :
000bf6 958a     +DEC R24
000bf7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xD
000bf8 9468      	set
000bf9 9508      	ret
                 
                 _w1_read:
000bfa e068      	ldi  r22,8
                 	__w1_read0:
000bfb dfd4      	rcall __w1_read_bit
000bfc 956a      	dec  r22
000bfd f7e9      	brne __w1_read0
000bfe 9508      	ret
                 
                 _w1_write:
000bff e068      	ldi  r22,8
000c00 9179      	ld   r23,y+
000c01 27ee      	clr  r30
                 __w1_write0:
000c02 dfdd      	rcall __w1_write_bit
000c03 f426      	brtc __w1_write1
000c04 9577      	ror  r23
000c05 956a      	dec  r22
000c06 f7d9      	brne __w1_write0
000c07 95e3      	inc  r30
                 __w1_write1:
000c08 9508      	ret
                 
                 _w1_dow_crc8:
000c09 27ee      	clr  r30
000c0a 8188      	ld   r24,y
000c0b 2388      	tst  r24
000c0c f081      	breq __w1_dow_crc83
000c0d e168      	ldi  r22,0x18
000c0e 81a9      	ldd  r26,y+1
000c0f 81ba      	ldd  r27,y+2
                 __w1_dow_crc80:
000c10 e098      	ldi  r25,8
000c11 91fd      	ld   r31,x+
                 __w1_dow_crc81:
000c12 2f7f      	mov  r23,r31
000c13 277e      	eor  r23,r30
000c14 9577      	ror  r23
000c15 f408      	brcc __w1_dow_crc82
000c16 27e6      	eor  r30,r22
                 __w1_dow_crc82:
000c17 95e7      	ror  r30
000c18 95f6      	lsr  r31
000c19 959a      	dec  r25
000c1a f7b9      	brne __w1_dow_crc81
000c1b 958a      	dec  r24
000c1c f799      	brne __w1_dow_crc80
                 __w1_dow_crc83:
000c1d 9623      	adiw r28,3
000c1e 9508      	ret
                 
                 __ROUND_REPACK:
000c1f 2355      	TST  R21
000c20 f442      	BRPL __REPACK
000c21 3850      	CPI  R21,0x80
000c22 f411      	BRNE __ROUND_REPACK0
000c23 ffe0      	SBRS R30,0
000c24 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000c25 9631      	ADIW R30,1
000c26 1f69      	ADC  R22,R25
000c27 1f79      	ADC  R23,R25
000c28 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000c29 e850      	LDI  R21,0x80
000c2a 2757      	EOR  R21,R23
000c2b f411      	BRNE __REPACK0
000c2c 935f      	PUSH R21
000c2d c073      	RJMP __ZERORES
                 __REPACK0:
000c2e 3f5f      	CPI  R21,0xFF
000c2f f031      	BREQ __REPACK1
000c30 0f66      	LSL  R22
000c31 0c00      	LSL  R0
000c32 9557      	ROR  R21
000c33 9567      	ROR  R22
000c34 2f75      	MOV  R23,R21
000c35 9508      	RET
                 __REPACK1:
000c36 935f      	PUSH R21
000c37 2000      	TST  R0
000c38 f00a      	BRMI __REPACK2
000c39 c073      	RJMP __MAXRES
                 __REPACK2:
000c3a c06c      	RJMP __MINRES
                 
                 __UNPACK:
000c3b e850      	LDI  R21,0x80
000c3c 2e19      	MOV  R1,R25
000c3d 2215      	AND  R1,R21
000c3e 0f88      	LSL  R24
000c3f 1f99      	ROL  R25
000c40 2795      	EOR  R25,R21
000c41 0f55      	LSL  R21
000c42 9587      	ROR  R24
                 
                 __UNPACK1:
000c43 e850      	LDI  R21,0x80
000c44 2e07      	MOV  R0,R23
000c45 2205      	AND  R0,R21
000c46 0f66      	LSL  R22
000c47 1f77      	ROL  R23
000c48 2775      	EOR  R23,R21
000c49 0f55      	LSL  R21
000c4a 9567      	ROR  R22
000c4b 9508      	RET
                 
                 __CFD1U:
000c4c 9468      	SET
000c4d c001      	RJMP __CFD1U0
                 __CFD1:
000c4e 94e8      	CLT
                 __CFD1U0:
000c4f 935f      	PUSH R21
000c50 dff2      	RCALL __UNPACK1
000c51 3870      	CPI  R23,0x80
000c52 f018      	BRLO __CFD10
000c53 3f7f      	CPI  R23,0xFF
000c54 f408      	BRCC __CFD10
000c55 c04b      	RJMP __ZERORES
                 __CFD10:
000c56 e156      	LDI  R21,22
000c57 1b57      	SUB  R21,R23
000c58 f4aa      	BRPL __CFD11
000c59 9551      	NEG  R21
000c5a 3058      	CPI  R21,8
000c5b f40e      	BRTC __CFD19
000c5c 3059      	CPI  R21,9
                 __CFD19:
000c5d f030      	BRLO __CFD17
000c5e efef      	SER  R30
000c5f efff      	SER  R31
000c60 ef6f      	SER  R22
000c61 e77f      	LDI  R23,0x7F
000c62 f977      	BLD  R23,7
000c63 c01a      	RJMP __CFD15
                 __CFD17:
000c64 2777      	CLR  R23
000c65 2355      	TST  R21
000c66 f0b9      	BREQ __CFD15
                 __CFD18:
000c67 0fee      	LSL  R30
000c68 1fff      	ROL  R31
000c69 1f66      	ROL  R22
000c6a 1f77      	ROL  R23
000c6b 955a      	DEC  R21
000c6c f7d1      	BRNE __CFD18
000c6d c010      	RJMP __CFD15
                 __CFD11:
000c6e 2777      	CLR  R23
                 __CFD12:
000c6f 3058      	CPI  R21,8
000c70 f028      	BRLO __CFD13
000c71 2fef      	MOV  R30,R31
000c72 2ff6      	MOV  R31,R22
000c73 2f67      	MOV  R22,R23
000c74 5058      	SUBI R21,8
000c75 cff9      	RJMP __CFD12
                 __CFD13:
000c76 2355      	TST  R21
000c77 f031      	BREQ __CFD15
                 __CFD14:
000c78 9576      	LSR  R23
000c79 9567      	ROR  R22
000c7a 95f7      	ROR  R31
000c7b 95e7      	ROR  R30
000c7c 955a      	DEC  R21
000c7d f7d1      	BRNE __CFD14
                 __CFD15:
000c7e 2000      	TST  R0
000c7f f40a      	BRPL __CFD16
000c80 d088      	RCALL __ANEGD1
                 __CFD16:
000c81 915f      	POP  R21
000c82 9508      	RET
                 
                 __CDF1U:
000c83 9468      	SET
000c84 c001      	RJMP __CDF1U0
                 __CDF1:
000c85 94e8      	CLT
                 __CDF1U0:
000c86 9730      	SBIW R30,0
000c87 4060      	SBCI R22,0
000c88 4070      	SBCI R23,0
000c89 f0b1      	BREQ __CDF10
000c8a 2400      	CLR  R0
000c8b f026      	BRTS __CDF11
000c8c 2377      	TST  R23
000c8d f412      	BRPL __CDF11
000c8e 9400      	COM  R0
000c8f d079      	RCALL __ANEGD1
                 __CDF11:
000c90 2e17      	MOV  R1,R23
000c91 e17e      	LDI  R23,30
000c92 2011      	TST  R1
                 __CDF12:
000c93 f032      	BRMI __CDF13
000c94 957a      	DEC  R23
000c95 0fee      	LSL  R30
000c96 1fff      	ROL  R31
000c97 1f66      	ROL  R22
000c98 1c11      	ROL  R1
000c99 cff9      	RJMP __CDF12
                 __CDF13:
000c9a 2fef      	MOV  R30,R31
000c9b 2ff6      	MOV  R31,R22
000c9c 2d61      	MOV  R22,R1
000c9d 935f      	PUSH R21
000c9e df8a      	RCALL __REPACK
000c9f 915f      	POP  R21
                 __CDF10:
000ca0 9508      	RET
                 
                 __ZERORES:
000ca1 27ee      	CLR  R30
000ca2 27ff      	CLR  R31
000ca3 2766      	CLR  R22
000ca4 2777      	CLR  R23
000ca5 915f      	POP  R21
000ca6 9508      	RET
                 
                 __MINRES:
000ca7 efef      	SER  R30
000ca8 efff      	SER  R31
000ca9 e76f      	LDI  R22,0x7F
000caa ef7f      	SER  R23
000cab 915f      	POP  R21
000cac 9508      	RET
                 
                 __MAXRES:
000cad efef      	SER  R30
000cae efff      	SER  R31
000caf e76f      	LDI  R22,0x7F
000cb0 e77f      	LDI  R23,0x7F
000cb1 915f      	POP  R21
000cb2 9508      	RET
                 
                 __MULF12:
000cb3 935f      	PUSH R21
000cb4 df86      	RCALL __UNPACK
000cb5 3870      	CPI  R23,0x80
000cb6 f351      	BREQ __ZERORES
000cb7 3890      	CPI  R25,0x80
000cb8 f341      	BREQ __ZERORES
000cb9 2401      	EOR  R0,R1
000cba 9408      	SEC
000cbb 1f79      	ADC  R23,R25
000cbc f423      	BRVC __MULF124
000cbd f31c      	BRLT __ZERORES
                 __MULF125:
000cbe 2000      	TST  R0
000cbf f33a      	BRMI __MINRES
000cc0 cfec      	RJMP __MAXRES
                 __MULF124:
000cc1 920f      	PUSH R0
000cc2 931f      	PUSH R17
000cc3 932f      	PUSH R18
000cc4 933f      	PUSH R19
000cc5 934f      	PUSH R20
000cc6 2711      	CLR  R17
000cc7 2722      	CLR  R18
000cc8 2799      	CLR  R25
000cc9 9f68      	MUL  R22,R24
000cca 01a0      	MOVW R20,R0
000ccb 9f8f      	MUL  R24,R31
000ccc 2d30      	MOV  R19,R0
000ccd 0d41      	ADD  R20,R1
000cce 1f59      	ADC  R21,R25
000ccf 9f6b      	MUL  R22,R27
000cd0 0d30      	ADD  R19,R0
000cd1 1d41      	ADC  R20,R1
000cd2 1f59      	ADC  R21,R25
000cd3 9f8e      	MUL  R24,R30
000cd4 d027      	RCALL __MULF126
000cd5 9fbf      	MUL  R27,R31
000cd6 d025      	RCALL __MULF126
000cd7 9f6a      	MUL  R22,R26
000cd8 d023      	RCALL __MULF126
000cd9 9fbe      	MUL  R27,R30
000cda d01d      	RCALL __MULF127
000cdb 9faf      	MUL  R26,R31
000cdc d01b      	RCALL __MULF127
000cdd 9fae      	MUL  R26,R30
000cde 0d11      	ADD  R17,R1
000cdf 1f29      	ADC  R18,R25
000ce0 1f39      	ADC  R19,R25
000ce1 1f49      	ADC  R20,R25
000ce2 1f59      	ADC  R21,R25
000ce3 2fe3      	MOV  R30,R19
000ce4 2ff4      	MOV  R31,R20
000ce5 2f65      	MOV  R22,R21
000ce6 2f52      	MOV  R21,R18
000ce7 914f      	POP  R20
000ce8 913f      	POP  R19
000ce9 912f      	POP  R18
000cea 911f      	POP  R17
000ceb 900f      	POP  R0
000cec 2366      	TST  R22
000ced f02a      	BRMI __MULF122
000cee 0f55      	LSL  R21
000cef 1fee      	ROL  R30
000cf0 1fff      	ROL  R31
000cf1 1f66      	ROL  R22
000cf2 c002      	RJMP __MULF123
                 __MULF122:
000cf3 9573      	INC  R23
000cf4 f24b      	BRVS __MULF125
                 __MULF123:
000cf5 df29      	RCALL __ROUND_REPACK
000cf6 915f      	POP  R21
000cf7 9508      	RET
                 
                 __MULF127:
000cf8 0d10      	ADD  R17,R0
000cf9 1d21      	ADC  R18,R1
000cfa 1f39      	ADC  R19,R25
000cfb c002      	RJMP __MULF128
                 __MULF126:
000cfc 0d20      	ADD  R18,R0
000cfd 1d31      	ADC  R19,R1
                 __MULF128:
000cfe 1f49      	ADC  R20,R25
000cff 1f59      	ADC  R21,R25
000d00 9508      	RET
                 
                 __ADDW2R15:
000d01 2400      	CLR  R0
000d02 0daf      	ADD  R26,R15
000d03 1db0      	ADC  R27,R0
000d04 9508      	RET
                 
                 __ANEGW1:
000d05 95f1      	NEG  R31
000d06 95e1      	NEG  R30
000d07 40f0      	SBCI R31,0
000d08 9508      	RET
                 
                 __ANEGD1:
000d09 95f0      	COM  R31
000d0a 9560      	COM  R22
000d0b 9570      	COM  R23
000d0c 95e1      	NEG  R30
000d0d 4fff      	SBCI R31,-1
000d0e 4f6f      	SBCI R22,-1
000d0f 4f7f      	SBCI R23,-1
000d10 9508      	RET
                 
                 __ASRW12:
000d11 23ee      	TST  R30
000d12 2e0e      	MOV  R0,R30
000d13 01fd      	MOVW R30,R26
000d14 f021      	BREQ __ASRW12R
                 __ASRW12L:
000d15 95f5      	ASR  R31
000d16 95e7      	ROR  R30
000d17 940a      	DEC  R0
000d18 f7e1      	BRNE __ASRW12L
                 __ASRW12R:
000d19 9508      	RET
                 
                 __LSRW2:
000d1a 95f6      	LSR  R31
000d1b 95e7      	ROR  R30
000d1c 95f6      	LSR  R31
000d1d 95e7      	ROR  R30
000d1e 9508      	RET
                 
                 __CWD1:
000d1f 2f6f      	MOV  R22,R31
000d20 0f66      	ADD  R22,R22
000d21 0b66      	SBC  R22,R22
000d22 2f76      	MOV  R23,R22
000d23 9508      	RET
                 
                 __LNEGB1:
000d24 23ee      	TST  R30
000d25 e0e1      	LDI  R30,1
000d26 f009      	BREQ __LNEGB1F
000d27 27ee      	CLR  R30
                 __LNEGB1F:
000d28 9508      	RET
                 
                 __MULW12U:
000d29 9ffa      	MUL  R31,R26
000d2a 2df0      	MOV  R31,R0
000d2b 9feb      	MUL  R30,R27
000d2c 0df0      	ADD  R31,R0
000d2d 9fea      	MUL  R30,R26
000d2e 2de0      	MOV  R30,R0
000d2f 0df1      	ADD  R31,R1
000d30 9508      	RET
                 
                 __MULW12:
000d31 d02a      	RCALL __CHKSIGNW
000d32 dff6      	RCALL __MULW12U
000d33 f40e      	BRTC __MULW121
000d34 dfd0      	RCALL __ANEGW1
                 __MULW121:
000d35 9508      	RET
                 
                 __DIVW21U:
000d36 2400      	CLR  R0
000d37 2411      	CLR  R1
000d38 e190      	LDI  R25,16
                 __DIVW21U1:
000d39 0faa      	LSL  R26
000d3a 1fbb      	ROL  R27
000d3b 1c00      	ROL  R0
000d3c 1c11      	ROL  R1
000d3d 1a0e      	SUB  R0,R30
000d3e 0a1f      	SBC  R1,R31
000d3f f418      	BRCC __DIVW21U2
000d40 0e0e      	ADD  R0,R30
000d41 1e1f      	ADC  R1,R31
000d42 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000d43 60a1      	SBR  R26,1
                 __DIVW21U3:
000d44 959a      	DEC  R25
000d45 f799      	BRNE __DIVW21U1
000d46 01fd      	MOVW R30,R26
000d47 01d0      	MOVW R26,R0
000d48 9508      	RET
                 
                 __DIVW21:
000d49 d012      	RCALL __CHKSIGNW
000d4a dfeb      	RCALL __DIVW21U
000d4b f40e      	BRTC __DIVW211
000d4c dfb8      	RCALL __ANEGW1
                 __DIVW211:
000d4d 9508      	RET
                 
                 __MODW21:
000d4e 94e8      	CLT
000d4f ffb7      	SBRS R27,7
000d50 c004      	RJMP __MODW211
000d51 95a0      	COM  R26
000d52 95b0      	COM  R27
000d53 9611      	ADIW R26,1
000d54 9468      	SET
                 __MODW211:
000d55 fdf7      	SBRC R31,7
000d56 dfae      	RCALL __ANEGW1
000d57 dfde      	RCALL __DIVW21U
000d58 01fd      	MOVW R30,R26
000d59 f40e      	BRTC __MODW212
000d5a dfaa      	RCALL __ANEGW1
                 __MODW212:
000d5b 9508      	RET
                 
                 __CHKSIGNW:
000d5c 94e8      	CLT
000d5d fff7      	SBRS R31,7
000d5e c002      	RJMP __CHKSW1
000d5f dfa5      	RCALL __ANEGW1
000d60 9468      	SET
                 __CHKSW1:
000d61 ffb7      	SBRS R27,7
000d62 c006      	RJMP __CHKSW2
000d63 95a0      	COM  R26
000d64 95b0      	COM  R27
000d65 9611      	ADIW R26,1
000d66 f800      	BLD  R0,0
000d67 9403      	INC  R0
000d68 fa00      	BST  R0,0
                 __CHKSW2:
000d69 9508      	RET
                 
                 __GETW1P:
000d6a 91ed      	LD   R30,X+
000d6b 91fc      	LD   R31,X
000d6c 9711      	SBIW R26,1
000d6d 9508      	RET
                 
                 __GETW1PF:
000d6e 9005      	LPM  R0,Z+
000d6f 91f4      	LPM  R31,Z
000d70 2de0      	MOV  R30,R0
000d71 9508      	RET
                 
                 __PUTPARD1:
000d72 937a      	ST   -Y,R23
000d73 936a      	ST   -Y,R22
000d74 93fa      	ST   -Y,R31
000d75 93ea      	ST   -Y,R30
000d76 9508      	RET
                 
                 __EEPROMRDB:
000d77 99e1      	SBIC EECR,EEWE
000d78 cffe      	RJMP __EEPROMRDB
000d79 93ff      	PUSH R31
000d7a b7ff      	IN   R31,SREG
000d7b 94f8      	CLI
000d7c bbae      	OUT  EEARL,R26
000d7d bbbf      	OUT  EEARH,R27
000d7e 9ae0      	SBI  EECR,EERE
000d7f b3ed      	IN   R30,EEDR
000d80 bfff      	OUT  SREG,R31
000d81 91ff      	POP  R31
000d82 9508      	RET
                 
                 __EEPROMWRB:
000d83 9be1      	SBIS EECR,EEWE
000d84 c002      	RJMP __EEPROMWRB1
000d85 95a8      	WDR
000d86 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000d87 b79f      	IN   R25,SREG
000d88 94f8      	CLI
000d89 bbae      	OUT  EEARL,R26
000d8a bbbf      	OUT  EEARH,R27
000d8b 9ae0      	SBI  EECR,EERE
000d8c b38d      	IN   R24,EEDR
000d8d 17e8      	CP   R30,R24
000d8e f019      	BREQ __EEPROMWRB0
000d8f bbed      	OUT  EEDR,R30
000d90 9ae2      	SBI  EECR,EEMWE
000d91 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000d92 bf9f      	OUT  SREG,R25
000d93 9508      	RET
                 
                 __SAVELOCR6:
000d94 935a      	ST   -Y,R21
                 __SAVELOCR5:
000d95 934a      	ST   -Y,R20
                 __SAVELOCR4:
000d96 933a      	ST   -Y,R19
                 __SAVELOCR3:
000d97 932a      	ST   -Y,R18
                 __SAVELOCR2:
000d98 931a      	ST   -Y,R17
000d99 930a      	ST   -Y,R16
000d9a 9508      	RET
                 
                 __LOADLOCR6:
000d9b 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000d9c 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000d9d 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000d9e 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000d9f 8119      	LDD  R17,Y+1
000da0 8108      	LD   R16,Y
000da1 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  50 r1 :  20 r2 :   2 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  70 r17:  56 r18:  26 r19:  39 r20:  28 r21:  53 r22:  55 r23:  47 
r24:  61 r25:  34 r26: 319 r27: 135 r28:  21 r29:   1 r30: 840 r31: 279 
x  :  51 y  : 405 z  :  26 
Registers used: 23 out of 35 (65.7%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  31 add   :  26 
adiw  :  51 and   :   4 andi  :  13 asr   :   3 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :  60 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  16 
brlt  :   3 brmi  :   5 brne  : 100 brpl  :   8 brsh  :  15 brtc  :   5 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  : 282 
cbi   :  34 cbr   :   0 clc   :   1 clh   :   0 cli   :   6 cln   :   0 
clr   :  30 cls   :   0 clt   :   5 clv   :   0 clz   :   0 com   :  10 
cp    :  15 cpc   :  34 cpi   : 119 cpse  :   0 dec   :  24 des   :   0 
eor   :   8 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  11 inc   :   3 jmp   :  43 ld    :  80 ldd   : 134 ldi   : 433 
lds   :  91 lpm   :  14 lsl   :  13 lsr   :   4 mov   :  48 movw  :  42 
mul   :  15 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   2 
ori   :   8 out   :  57 pop   :  29 push  :  28 rcall :  68 ret   :  95 
reti  :   2 rjmp  : 160 rol   :  17 ror   :  16 sbc   :   3 sbci  :  21 
sbi   :  41 sbic  :   5 sbis  :   6 sbiw  :  27 sbr   :   1 sbrc  :   5 
sbrs  :  16 sec   :   2 seh   :   0 sei   :   4 sen   :   0 ser   :   8 
ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 216 std   :  40 sts   :  79 sub   :   3 subi  :  54 swap  :   1 
tst   :  18 wdr   :   2 
Instructions used: 80 out of 116 (69.0%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001b44   6782    198   6980   32768  21.3%
[.dseg] 0x000060 0x00033f      0    223    223    2143  10.4%
[.eseg] 0x000000 0x000023      0     35     35    1024   3.4%

Assembly complete, 0 errors, 6 warnings
