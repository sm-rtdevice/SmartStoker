#ifndef _VARIABLES_INCLUDED_
#define _VARIABLES_INCLUDED_

#include "src\Definitions.h"

#ifndef TEST
#define DS_ROM_CODE_SIZE 9                  // 8 байт S/N датчика, todo: установить 8 на реальной системе без функции поиска
#else
#define DS_ROM_CODE_SIZE 9                  // 9 байт - для функции поиска
#endif

#ifdef SAVETEMPER
#define TEMPER_POINT_COUNT 720/2            // количество температурных точек, сохраняемых в EEPROM 998
#endif

#ifdef SIMULATOR

unsigned char ds1820_rom_codes[MAX_DS1820][DS_ROM_CODE_SIZE] = { 0x10, 0xF7, 0xB5, 0x8A, 0x02, 0x00, 0x00, 0x1C, 0x00,  // для симулятора! радиатор, массив для хранения SN - уникальных кодов датчиков, 8 байт на датчик  28AB5F7
0x10, 0x30, 0xC5, 0xC8, 0x00, 0x00, 0x00, 0xC3, 0x00,  // для симулятора! котел                                                                           C8C530 
0x28, 0x30, 0xC5, 0xB8, 0x00, 0x00, 0x00, 0x8E, 0x00 }; // для симулятора! 1-контур B8C530 

#ifdef SAVETEMPER
char LogTemp[MAX_DS1820][TEMPER_POINT_COUNT];  // температура, сохраненная в памяти контроллера 12*60 = 720 измерение каждую минуту в течении 12 часов, сохр. в eeprom/flash память
unsigned int ind[MAX_DS1820] = { 0,0 };        // индекс, соханяемой температуры в массиве: LogTemp[ind] = CurrentTemp; ind++ % 720
unsigned char SaveTimeOut;                     // дополнительный делитель времени
#endif

unsigned char MinT = 25;            // температура включения насоса  45 (радиатор) 
unsigned char MaxT = 50;            // температура отключения насоса 55 (радиатор)                  
unsigned char MinTCaldron = 20;     // минимальная температура воды в котле при котором возможно включение насоса

unsigned char StokerMode = 0;       // 0 - авто (DS1820); 1 - импульсный; 2 - принудительное включение; 3 - принудительное отключение

unsigned char WorkTime = 1;         // время работы 5-10 мин
unsigned char IdleTime = 1;         // время простоя 20-30 мин      

unsigned char nStart;               // счетчик перезапусков контроллера

unsigned char AutoRestoration = 0;  // 1 - разрешение автоматического перехода в режим управления от датчиков, 0 - запрещение (переход к автоматическому управлению при восстановлении связи)
#else

// реальные датчики системы:                                                                                                     
/*
// тестовый набор с двумя датчикми:
eeprom unsigned char ds1820_rom_codes[MAX_DS1820][DS_ROM_CODE_SIZE] = {0x28, 0xFF, 0x42, 0xBE, 0xA4, 0x15, 0x04, 0xBC, 0x00,  // резерв (в защитной оболочке) (закругленный на конце)
0x28, 0xFF, 0x0B, 0x54, 0x73, 0x15, 0x01, 0xA8, 0x00, // котел - ds18b20(в защитной оболочке) (закругленный на конце)
0x28, 0xFF, 0x22, 0x72, 0x90, 0x15, 0x03, 0x45, 0x00};// внешний (в защитной оболочке) (цилиндрический угловатый)
*/
// РАБОЧИЙ НАБОР:                                                                 
eeprom unsigned char ds1820_rom_codes[MAX_DS1820][DS_ROM_CODE_SIZE] = { 0x28, 0xFF, 0xE0, 0x2F, 0x90, 0x15, 0x03, 0xA1, 0x00, // радиатор SN - 8 байт! на датчик + 1 на поиск - ds18b20 (в защитной оболочке)         
0x28, 0xFF, 0x0B, 0x54, 0x73, 0x15, 0x01, 0xA8, 0x00,   // котел - ds18b20(в защитной оболочке) (закругленный на конце)
0x28, 0xFF, 0x22, 0x72, 0x90, 0x15, 0x03, 0x45, 0x00 }; // внешний (в защитной оболочке) (цилиндрический угловатый)
//0x28, 0xFF, 0x42, 0xBE, 0xA4, 0x15, 0x04, 0xBC, 0x00  // резерв (в защитной оболочке) (закругленный на конце)

													   /*
													   0x28, 0xFF, 0xE0, 0x2F, 0x90, 0x15, 0x03, 0xA1, 0x00 - ds18b20 (в защитной оболочке) (к/с/ч)
													   0x28, 0xFF, 0x0B, 0x54, 0x73, 0x15, 0x01, 0xA8, 0x00 - ds18b20 (в защитной оболочке) (к/ж/ч) закругленный на конце, рабочий
													   0x28, 0x4A, 0x0B, 0xE1, 0x06, 0x00, 0x00, 0x3C, 0x00 - ds18b20 (опрос только при поиске sn) полурабочий
													   0x28,                                                - новый (в защитной оболочке) (х/х/х) для улицы

													   0x10, 0x05, 0x39, 0xDA, 0x00, 0x08, 0x00, 0x0B, 0x00 - котел ds1820
													   0x10, 0x83, 0x66, 0x38, 0x01, 0x08, 0x00, 0x4C, 0x00 - новый рабочий
													   0x10, 0xF6, 0xCD, 0x8F, 0x02, 0x08, 0x00, 0x8A, 0x00 - не работает (определяется поиском)
													   0x10, 0xBA, 0x12, 0x1E, 0x01, 0x08, 0x00, 0x3C, 0x00 - не работает (был на радиаторе)
													   */

#ifdef SAVETEMPER                                                               
eeprom char LogTemp[MAX_DS1820][TEMPER_POINT_COUNT];   // температура, сохраненная в памяти контроллера 12*60 = 720 измерение каждую минуту в течении 12 часов, сохр. в eeprom/flash память
eeprom unsigned int ind[MAX_DS1820] = { 0,0 };         // индекс, соханяемой температуры в массиве: LogTemp[ind] = CurrentTemp; ind++ % 720
unsigned char SaveTimeOut;                             // дополнительный делитель времени
#endif           

										   // сохранение в eeprom
eeprom unsigned char MinT = 28;            // температура включения насоса  45 (радиатор) 
eeprom unsigned char MaxT = 30;            // температура отключения насоса 55 (радиатор)                  
eeprom unsigned char MinTCaldron = 10;     // минимальная температура воды в котле при котором возможно включение насоса

eeprom unsigned char StokerMode = 0;       // 0 - авто (DS1820); 1 - импульсный; 2 - принудительное включение; 3 - принудительное отключение

eeprom unsigned char WorkTime = 5;         // время работы 5-10 мин
eeprom unsigned char IdleTime = 15;        // время простоя 20-30 мин      

eeprom unsigned char nStart;               // счетчик перезапусков контроллера

eeprom unsigned char AutoRestoration = 0;  // 1 - разрешение автоматического перехода в режим управления от датчиков, 0 - запрещение
#endif //\SIMULATOR

unsigned char ds1820_devices = 3;          // количество найденных датчиков 
int Temperature[3] = { -90, -90 };         // [0] - радиатор; [1] - котел текущие значения температуры  0, 85; [2] - на улице
int TempDec[3] = { 0,0,0 };                // десятичная часть температуры decimal
unsigned char Sign[3];                     // знак температуры +-        

char tRadiator = 0;                        // [0] - 1 byte для отправки 
char tCaldron = 0;                         // [1] - 1 byte для отправки 
char tOutSide = 0;                         // [2] - 1 byte для отправки внешний

unsigned char ds1820_sn[MAX_DS1820][DS_ROM_CODE_SIZE];    // SN - уникальных кодов датчиков(во FLASH-памяти для функций)                                                      

unsigned char MaxT1 = 50;                  // расчетный верхний предел отключения насоса (если в котле меньше температуры чем верхняя уставка) MaxT - по умолчанию
unsigned char OnBlock = 1;                 // блокировка включения 1- включение разрешено (по умолчанию), 0 - включение заблокировано  
unsigned int TickCount = 0;                // время работы/простоя в импульсном режиме (прошедшее время) - (с)

BYTE Errcount = 0;                         // количество ошибок получения температуры от датчика, максимальное значение ~60 - признак неисправности датчика --> переход в импульсный режим
BYTE k1;                                   // k1 для циклов и счётчика
BYTE i = 0;                                // для циклов

										   //char simv;                               // прием\передача данных по 232-порту
										   //unsigned char HH,HL;                     // для отсыски байт в BCD формате   

bit MeasureTemp = 1;                       // включение измерения температуры, если не включен режим управления от датчиков, 1 - опрос всегда, 0 - опрос только если режим управления от датчиков        

char BufCRC[18];                           // входящий буфер для проверки CRC, размер = 16+CRC+CMD


char lcd_screen = 0; // 0 - temper, 1 - clock

#endif // \_VARIABLES_INCLUDED_
